#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.9 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 59 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 5749 0 17 3 29 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 17 3 27 #";*    Author: Shubham Kahal"
0 0 25 29 1 #"\n"
0 0 17 3 30 #";*    File: integer-series.rkt"
0 0 25 29 1 #"\n"
0 0 17 3 29 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 29 3 18 #"#lang typed/racket"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 17 3 63
#"; One-dimensional array like structure with axis labels. Labels"
0 0 25 29 1 #"\n"
0 0 17 3 63
#"; must be unique and must be a hashable type. The series object"
0 0 25 29 1 #"\n"
0 0 17 3 65
#"; supports both integer (idx) and label-based indexing. Functions"
0 0 25 29 1 #"\n"
0 0 17 3 64
#"; can be mapped to each value of the series allowing for various"
0 0 25 29 1 #"\n"
0 0 17 3 62
#"; operations. The integer series is optimized for working with"
0 0 25 29 1 #"\n"
0 0 17 3 11 #"; integers."
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 17 3 48 #"; Provide functions in this file to other files."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 7 #"provide"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 14 3 10 #"struct-out"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #" "
0 0 14 3 13 #"ISeries-index"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 8 #"provide:"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 11 #"new-ISeries"
0 0 25 3 3 #" (("
0 0 14 3 8 #"Vectorof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #") ("
0 0 14 3 6 #"Option"
0 0 25 3 2 #" ("
0 0 14 3 1 #"U"
0 0 25 3 2 #" ("
0 0 14 3 10 #"Sequenceof"
0 0 25 3 1 #" "
0 0 14 3 13 #"IndexDataType"
0 0 25 3 2 #") "
0 0 14 3 7 #"RFIndex"
0 0 25 3 4 #")) ["
0 0 24 3 11 #"#:fill-null"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 2 #"] "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 17 #"set-ISeries-index"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 1 #"U"
0 0 25 3 2 #" ("
0 0 14 3 10 #"Sequenceof"
0 0 25 3 1 #" "
0 0 14 3 13 #"IndexDataType"
0 0 25 3 2 #") "
0 0 14 3 7 #"RFIndex"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 22 #"set-ISeries-null-value"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 12 #"iseries-iref"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 19 #"iseries-loc-boolean"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 1 #"U"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 11 #"iseries-loc"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 1 #"U"
0 0 25 3 1 #" "
0 0 14 3 5 #"Label"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 5 #"Label"
0 0 25 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 25 3 3 #")) "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 1 #"U"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 23 #"iseries-loc-multi-index"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 1 #"U"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"String"
0 0 25 3 2 #") "
0 0 14 3 18 #"ListofListofString"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 1 #"U"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 12 #"iseries-iloc"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 1 #"U"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 3 #")) "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 1 #"U"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 18 #"iseries-iloc-range"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 17 #"iseries-index-ref"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 13 #"IndexDataType"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 13 #"iseries-range"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 14 #"iseries-length"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 18 #"iseries-referencer"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 5 #"Index"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 12 #"iseries-data"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 13 #"iseries-index"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 1 #"U"
0 0 25 3 1 #" "
0 0 14 3 5 #"False"
0 0 25 3 1 #" "
0 0 14 3 7 #"RFIndex"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 15 #"iseries-groupby"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ["
0 0 24 3 10 #"#:by-value"
0 0 25 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 25 3 2 #"] "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 9 #"GroupHash"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 17 #"apply-agg-iseries"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Symbol"
0 0 25 3 1 #" "
0 0 14 3 9 #"GroupHash"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 9 #"GenSeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 6 #"map/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 6 #"bop/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 7 #"comp/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 4 #"+/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 4 #"-/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 4 #"*/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 4 #"//is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 4 #"%/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 4 #"r/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 5 #"+./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 5 #"-./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 5 #"*./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 5 #"/./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 5 #"%./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 5 #"r./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 4 #">/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 4 #"</is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 5 #">=/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 5 #"<=/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 4 #"=/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 5 #"!=/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 5 #">./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 5 #"<./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 6 #">=./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 6 #"<=./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 5 #"=./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 6 #"!=./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 12 #"apply-agg-is"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Symbol"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 4 #"Real"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 13 #"apply-stat-is"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Symbol"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 4 #"Real"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 13 #"iseries-print"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 11 #"Output-Port"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 4 #"Void"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 14 #"iseries-filter"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 18 #"iseries-filter-not"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 14 #"fxvector->list"
0 0 25 3 2 #" ("
0 0 14 3 8 #"FxVector"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ["
0 0 14 3 14 #"list->fxvector"
0 0 25 3 3 #" (("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 8 #"FxVector"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 17 3 60
#"; use build-index-from-labels function and Label, SIndex and"
0 0 25 29 1 #"\n"
0 0 17 3 41 #"; LabelIndex structs from indexed-series."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 13 #"racket/pretty"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 13 #"racket/fixnum"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 17 #"racket/unsafe/ops"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 15 #"math/statistics"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 25 3 1 #" "
0 0 19 3 20 #"\"indexed-series.rkt\""
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 0 25 3 2 #"  "
0 0 14 3 21 #"build-index-from-list"
0 0 25 3 1 #" "
0 0 14 3 27 #"build-multi-index-from-list"
0 0 25 3 9 #"         "
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 14 3 7 #"RFIndex"
0 0 25 3 1 #" "
0 0 14 3 8 #"RFIndex?"
0 0 25 3 1 #" "
0 0 14 3 13 #"IndexDataType"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 14 3 13 #"extract-index"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 0 25 3 2 #"  "
0 0 14 3 5 #"Label"
0 0 25 3 1 #" "
0 0 14 3 6 #"SIndex"
0 0 25 3 1 #" "
0 0 14 3 10 #"LabelIndex"
0 0 25 3 1 #" "
0 0 14 3 16 #"LabelIndex-index"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 14 3 6 #"FIndex"
0 0 25 3 1 #" "
0 0 14 3 11 #"FlonumIndex"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 14 3 11 #"label-index"
0 0 25 3 1 #" "
0 0 14 3 12 #"key->lst-idx"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 14 3 8 #"idx->key"
0 0 25 3 1 #" "
0 0 14 3 11 #"is-labeled?"
0 0 25 3 1 #" "
0 0 14 3 20 #"ListofIndexDataType?"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 14 3 11 #"is-indexed?"
0 0 25 3 1 #" "
0 0 14 3 12 #"ListofIndex?"
0 0 25 3 1 #" "
0 0 14 3 18 #"ListofListofString"
0 0 25 3 1 #" "
0 0 14 3 19 #"ListofListofString?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 25 3 1 #" "
0 0 19 3 20 #"\"boolean-series.rkt\""
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 14 3 11 #"new-BSeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 25 3 1 #" "
0 0 19 3 20 #"\"generic-series.rkt\""
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 0 25 3 2 #"  "
0 0 14 3 9 #"GenSeries"
0 0 25 3 1 #" "
0 0 14 3 10 #"GenSeries?"
0 0 25 3 1 #" "
0 0 14 3 11 #"GenericType"
0 0 25 3 1 #" "
0 0 14 3 15 #"gen-series-iref"
0 0 25 3 1 #" "
0 0 14 3 13 #"new-GenSeries"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 0 25 3 2 #"  "
0 0 14 3 21 #"gen-series-referencer"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 25 3 1 #" "
0 0 19 3 18 #"\"groupby-util.rkt\""
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 14 3 26 #"make-agg-value-hash-sindex"
0 0 25 3 1 #" "
0 0 14 3 28 #"agg-value-hash-to-gen-series"
0 0 25 3 1 #" "
0 0 14 3 12 #"AggValueHash"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 17 3 57 #"; racket/fixnum library provides operations like fx+ that"
0 0 25 29 1 #"\n"
0 0 17 3 59
#"; consumes and produce only fixnums. The operations in this"
0 0 25 29 1 #"\n"
0 0 17 3 60
#"; library are meant to be safe versions of unsafe operations"
0 0 25 29 1 #"\n"
0 0 17 3 57 #"; like unsafe-fx+. These safe operations are generally no"
0 0 25 29 1 #"\n"
0 0 17 3 59
#"; faster than using generic primitives like +. But they are"
0 0 25 29 1 #"\n"
0 0 17 3 60
#"; slower than the unsafe versions, with the benefit of being"
0 0 25 29 1 #"\n"
0 0 17 3 57 #"; safer. This library will be using unsafe operations for"
0 0 25 29 1 #"\n"
0 0 17 3 20 #"; speed improvement."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 47 #";; Integer series optimized with use of Fixnum."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 3 #" (["
0 0 14 3 5 #"index"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Option"
0 0 25 3 1 #" "
0 0 14 3 7 #"RFIndex"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ["
0 0 14 3 4 #"data"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ["
0 0 14 3 10 #"null-value"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 5 #"Boxof"
0 0 25 3 1 #" "
0 0 14 3 11 #"GenericType"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                 "
0 0 17 3 2 #";["
0 0 17 3 18 #"non-null-index-set"
0 0 17 3 1 #" "
0 0 17 3 1 #":"
0 0 17 3 2 #" ("
0 0 17 3 5 #"Setof"
0 0 17 3 1 #" "
0 0 17 3 8 #"Index)])"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 24 3 9 #"#:mutable"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 56 #"; Consumes a Vector of Fixnum and a list of Labels which"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; can come in list form or SIndex form and produces a ISeries"
0 0 25 29 1 #"\n"
0 0 17 3 16 #"; struct object."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 11 #"new-ISeries"
0 0 25 3 3 #" (("
0 0 14 3 8 #"Vectorof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #") ("
0 0 14 3 6 #"Option"
0 0 25 3 2 #" ("
0 0 14 3 1 #"U"
0 0 25 3 2 #" ("
0 0 14 3 10 #"Sequenceof"
0 0 25 3 1 #" "
0 0 14 3 13 #"IndexDataType"
0 0 25 3 2 #") "
0 0 14 3 7 #"RFIndex"
0 0 25 3 4 #")) ["
0 0 24 3 11 #"#:fill-null"
0 0 25 3 1 #" "
0 0 14 3 11 #"GenericType"
0 0 25 3 2 #"] "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 25 3 1 #" "
0 0 14 3 4 #"data"
0 0 25 3 1 #" "
0 0 14 3 6 #"labels"
0 0 25 3 1 #" "
0 0 24 3 11 #"#:fill-null"
0 0 25 3 2 #" ["
0 0 14 3 10 #"null-value"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 14 #"check-mismatch"
0 0 25 3 2 #" ("
0 0 14 3 7 #"RFIndex"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 4 #"Void"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"check-mismatch"
0 0 25 3 1 #" "
0 0 14 3 5 #"index"
0 0 25 3 5 #")    "
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 12 #"index-length"
0 0 25 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 25 3 1 #" "
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 15 3 9 #"for/list:"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 37 #"                                   (["
0 0 14 3 5 #"value"
0 0 25 3 2 #" ("
0 0 14 3 14 #"in-hash-values"
0 0 25 3 2 #" ("
0 0 14 3 13 #"extract-index"
0 0 25 3 1 #" "
0 0 14 3 5 #"index"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                   ("
0 0 14 3 6 #"length"
0 0 25 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 25 3 1 #" "
0 0 14 3 5 #"value"
0 0 25 3 1 #" "
0 0 14 3 12 #"ListofIndex?"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 6 #"unless"
0 0 25 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 25 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 25 3 1 #" "
0 0 14 3 4 #"data"
0 0 25 3 2 #") "
0 0 14 3 12 #"index-length"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 1 #"k"
0 0 25 3 2 #" ("
0 0 14 3 26 #"current-continuation-marks"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 5 #"raise"
0 0 25 3 2 #" ("
0 0 14 3 22 #"make-exn:fail:contract"
0 0 25 3 1 #" "
0 0 19 3 56
#"\"Cardinality of a Series' data and labels must be equal\""
0 0 25 3 1 #" "
0 0 14 3 1 #"k"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"void"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 8 #"RFIndex?"
0 0 25 3 1 #" "
0 0 14 3 6 #"labels"
0 0 25 3 7 #")      "
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"labels"
0 0 25 3 1 #" "
0 0 14 3 4 #"data"
0 0 25 3 2 #" ("
0 0 14 3 3 #"box"
0 0 25 3 1 #" "
0 0 14 3 10 #"null-value"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 6 #"labels"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 5 #"index"
0 0 25 3 2 #" ("
0 0 14 3 21 #"build-index-from-list"
0 0 25 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 25 3 1 #" "
0 0 14 3 6 #"labels"
0 0 25 3 1 #" "
0 0 14 3 20 #"ListofIndexDataType?"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 0 25 3 5 #"    ("
0 0 14 3 14 #"check-mismatch"
0 0 25 3 1 #" "
0 0 14 3 5 #"index"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 0 25 3 5 #"    ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 5 #"index"
0 0 25 3 1 #" "
0 0 14 3 4 #"data"
0 0 25 3 2 #" ("
0 0 14 3 3 #"box"
0 0 25 3 1 #" "
0 0 14 3 10 #"null-value"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 1 #" "
0 0 14 3 4 #"data"
0 0 25 3 2 #" ("
0 0 14 3 3 #"box"
0 0 25 3 1 #" "
0 0 14 3 10 #"null-value"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 17 #"set-ISeries-index"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 1 #"U"
0 0 25 3 2 #" ("
0 0 14 3 10 #"Sequenceof"
0 0 25 3 1 #" "
0 0 14 3 13 #"IndexDataType"
0 0 25 3 2 #") "
0 0 14 3 7 #"RFIndex"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 17 #"set-ISeries-index"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 1 #" "
0 0 14 3 6 #"labels"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 11 #"new-ISeries"
0 0 25 3 2 #" ("
0 0 14 3 12 #"iseries-data"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 2 #") "
0 0 14 3 6 #"labels"
0 0 25 3 1 #" "
0 0 24 3 11 #"#:fill-null"
0 0 25 3 2 #" ("
0 0 14 3 18 #"iseries-null-value"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 22 #"set-ISeries-null-value"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 22 #"set-ISeries-null-value"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 1 #" "
0 0 14 3 10 #"null-value"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 11 #"new-ISeries"
0 0 25 3 2 #" ("
0 0 14 3 12 #"iseries-data"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 3 #") ("
0 0 14 3 13 #"iseries-index"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 2 #") "
0 0 24 3 11 #"#:fill-null"
0 0 25 3 1 #" "
0 0 14 3 10 #"null-value"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 13 #"iseries-print"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 11 #"Output-Port"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 4 #"Void"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"iseries-print"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 1 #" "
0 0 14 3 4 #"port"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 2 #" ("
0 0 14 3 12 #"iseries-data"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 3 #"len"
0 0 25 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 0 25 3 1 #"("
0 0 14 3 3 #"out"
0 0 25 3 2 #" ("
0 0 14 3 19 #"current-output-port"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 19 3 16 #"\"Empty $ISeries\""
0 0 25 3 1 #" "
0 0 14 3 4 #"port"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 0 25 3 1 #"("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 19 3 11 #"\"*********\""
0 0 25 3 1 #" "
0 0 14 3 4 #"port"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 19 3 10 #"\"$ISeries\""
0 0 25 3 1 #" "
0 0 14 3 4 #"port"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 19 3 11 #"\"*********\""
0 0 25 3 1 #" "
0 0 14 3 4 #"port"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 0 25 3 3 #"  ("
0 0 15 3 2 #"do"
0 0 25 3 3 #" (("
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 0 25 3 8 #"      (("
0 0 14 3 2 #">="
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 3 #") ("
0 0 14 3 4 #"void"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 0 25 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 3 #"num"
0 0 25 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 13 #"ISeries-index"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 7 #"display"
0 0 25 3 2 #" ("
0 0 14 3 8 #"idx->key"
0 0 25 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 25 3 2 #" ("
0 0 14 3 13 #"ISeries-index"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 4 #")) ("
0 0 14 3 6 #"assert"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 14 3 6 #"index?"
0 0 25 3 3 #")) "
0 0 14 3 4 #"port"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 7 #"display"
0 0 25 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 14 3 6 #"index?"
0 0 25 3 2 #") "
0 0 14 3 4 #"port"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 25 3 1 #" "
0 0 14 3 4 #"port"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 14 3 3 #"num"
0 0 25 3 1 #" "
0 0 14 3 4 #"port"
0 0 25 3 7 #")))))))"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 17 3 56 #"; This function consumes an integer series and returns a"
0 0 25 29 1 #"\n"
0 0 17 3 58
#"; lambda function which consumes an index and provides the"
0 0 25 29 1 #"\n"
0 0 17 3 58
#"; value of the data at that index in the series. It can be"
0 0 25 29 1 #"\n"
0 0 17 3 51 #"; defined once and used repeatedly as a referencer."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 18 #"iseries-referencer"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 5 #"Index"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 18 #"iseries-referencer"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 4 #"data"
0 0 25 3 2 #" ("
0 0 14 3 12 #"ISeries-data"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 3 #"\316\273:"
0 0 25 3 3 #" (("
0 0 14 3 3 #"idx"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 0 25 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 25 3 1 #" "
0 0 14 3 4 #"data"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 59
#"; This function consumes an integer series and an index and"
0 0 25 29 1 #"\n"
0 0 17 3 48 #"; returns the value at that index in the series."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 12 #"iseries-iref"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"iseries-iref"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 1 #" "
0 0 14 3 7 #"lst-idx"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 3 #" (("
0 0 14 3 3 #"idx"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 4 #")) ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 2 #" ("
0 0 14 3 12 #"iseries-data"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 2 #") "
0 0 14 3 3 #"idx"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"       "
0 0 14 3 7 #"lst-idx"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 59
#"; This function consumes an integer series and an index and"
0 0 25 29 1 #"\n"
0 0 17 3 66
#"; returns a vector of values in the range [0:index] in the series."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 13 #"iseries-range"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"iseries-range"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 1 #" "
0 0 14 3 5 #"start"
0 0 25 3 1 #" "
0 0 14 3 3 #"end"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 11 #"vector-copy"
0 0 25 3 2 #" ("
0 0 14 3 12 #"ISeries-data"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 2 #") "
0 0 14 3 5 #"start"
0 0 25 3 1 #" "
0 0 14 3 3 #"end"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 58
#"; This function consumes an integer series and returns its"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; data vector."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 12 #"iseries-data"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"iseries-data"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"ISeries-data"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 58
#"; This function consumes an integer series and returns its"
0 0 25 29 1 #"\n"
0 0 17 3 8 #"; index."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 13 #"iseries-index"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 1 #"U"
0 0 25 3 1 #" "
0 0 14 3 5 #"False"
0 0 25 3 1 #" "
0 0 14 3 7 #"RFIndex"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"iseries-index"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 13 #"ISeries-index"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 58
#"; This function consumes an integer series and returns its"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; data vector."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 18 #"iseries-null-value"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 11 #"GenericType"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 18 #"iseries-null-value"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 5 #"unbox"
0 0 25 3 2 #" ("
0 0 14 3 18 #"ISeries-null-value"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 66
#"; This function consumes a series and an IndexDataType and returns"
0 0 25 29 1 #"\n"
0 0 17 3 49 #"; the list of values at that index in the series."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 17 #"iseries-index-ref"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 13 #"IndexDataType"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 17 #"iseries-index-ref"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 1 #" "
0 0 14 3 4 #"item"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"iseries-iref"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 2 #" ("
0 0 14 3 12 #"key->lst-idx"
0 0 25 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 25 3 2 #" ("
0 0 14 3 13 #"iseries-index"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 3 #")) "
0 0 14 3 4 #"item"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 58
#"; This function consumes an integer series and returns the"
0 0 25 29 1 #"\n"
0 0 17 3 24 #"; length of that series."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 14 #"iseries-length"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"iseries-length"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 13 #"vector-length"
0 0 25 3 2 #" ("
0 0 14 3 12 #"ISeries-data"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 14 #"fxvector->list"
0 0 25 3 2 #" ("
0 0 14 3 8 #"FxVector"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"fxvector->list"
0 0 25 3 1 #" "
0 0 14 3 5 #"fxvec"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 2 #" ("
0 0 14 3 15 #"fxvector-length"
0 0 25 3 1 #" "
0 0 14 3 5 #"fxvec"
0 0 25 3 3 #")) "
0 0 14 3 4 #"null"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 12 #"fxvector-ref"
0 0 25 3 1 #" "
0 0 14 3 5 #"fxvec"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 3 #") ("
0 0 14 3 14 #"fxvector->list"
0 0 25 3 1 #" "
0 0 14 3 5 #"fxvec"
0 0 25 3 2 #" ("
0 0 14 3 10 #"unsafe-fx+"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 6 #")))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 14 #"list->fxvector"
0 0 25 3 3 #" (("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 8 #"FxVector"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"list->fxvector"
0 0 25 3 1 #" "
0 0 14 3 11 #"fixnum-list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 11 #"fixnum-list"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 15 #"result-fxvector"
0 0 25 3 2 #" ("
0 0 14 3 13 #"make-fxvector"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"for"
0 0 25 3 2 #"(["
0 0 14 3 3 #"fix"
0 0 25 3 1 #" "
0 0 14 3 11 #"fixnum-list"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ["
0 0 14 3 1 #"i"
0 0 25 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 13 #"fxvector-set!"
0 0 25 3 1 #" "
0 0 14 3 15 #"result-fxvector"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 25 3 1 #" "
0 0 14 3 3 #"fix"
0 0 25 3 1 #" "
0 0 14 3 7 #"fixnum?"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 15 #"result-fxvector"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"map/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"map/is"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 1 #" "
0 0 14 3 2 #"fn"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 8 #"old-data"
0 0 25 3 2 #" ("
0 0 14 3 12 #"ISeries-data"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #" ("
0 0 14 3 12 #"build-vector"
0 0 25 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 25 3 1 #" "
0 0 14 3 8 #"old-data"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 31 #"                              ("
0 0 15 3 3 #"\316\273:"
0 0 25 3 3 #" (("
0 0 14 3 3 #"idx"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 7 #"Natural"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                ("
0 0 14 3 2 #"fn"
0 0 25 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 1 #" "
0 0 14 3 8 #"old-data"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 6 #")))) ("
0 0 14 3 18 #"ISeries-null-value"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 17 3 22 #";; Binary ISeries bops"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 62
#"; This function consumes 2 integer series and a function which"
0 0 25 29 1 #"\n"
0 0 17 3 65
#"; consumes 2 Fixnum's and produces a Fixnum result. This function"
0 0 25 29 1 #"\n"
0 0 17 3 60
#"; is applied to each value in the 2 series at the same index"
0 0 25 29 1 #"\n"
0 0 17 3 64
#"; resulting in a new data point and at the end of the loop a new"
0 0 25 29 1 #"\n"
0 0 17 3 62
#"; data vector. This data vector is the data of the new ISeries"
0 0 25 29 1 #"\n"
0 0 17 3 20 #"; which is returned."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"bop/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"bop/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"is1"
0 0 25 3 1 #" "
0 0 14 3 3 #"is2"
0 0 25 3 1 #" "
0 0 14 3 3 #"bop"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 2 #" ("
0 0 14 3 12 #"ISeries-data"
0 0 25 3 1 #" "
0 0 14 3 3 #"is1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 2 #" ("
0 0 14 3 12 #"ISeries-data"
0 0 25 3 1 #" "
0 0 14 3 3 #"is2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"unless"
0 0 25 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 0 25 3 3 #"  ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"bop/is"
0 0 25 3 1 #" "
0 0 19 3 33 #"\"Series must be of equal length.\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 25 3 1 #" "
0 0 14 3 5 #"v-bop"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #") ("
0 0 14 3 11 #"make-vector"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 3 #" #{"
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #"}))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 65
#"; Do loop returns ISeries, idx to 0 and increments by 1 Fixnum on"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 65
#"; each iteration (this is the step-exprs). When the loop has gone"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 65
#"; through the whole vector, the resulting new ISeries is returned"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 30 #"; which the v-bop as the data."
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"do:"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 3 #" (["
0 0 14 3 3 #"idx"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 10 #"unsafe-fx+"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 3 #" #{"
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 4 #"})])"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"       (("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 3 #") ("
0 0 14 3 11 #"new-ISeries"
0 0 25 3 1 #" "
0 0 14 3 5 #"v-bop"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 11 #"vector-set!"
0 0 25 3 1 #" "
0 0 14 3 5 #"v-bop"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 2 #" ("
0 0 14 3 3 #"bop"
0 0 25 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 1 25 65 1 #"\t"
0 1 25 65 1 #"\t"
0 1 25 65 1 #"\t"
0 0 25 3 4 #"   ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 17 3 58
#"; Functions provided by racket/unsafe/ops are unsafe. They"
0 0 25 29 1 #"\n"
0 0 17 3 55 #"; have certain constraints, but the constraints are not"
0 0 25 29 1 #"\n"
0 0 17 3 58
#"; checked, which allows the system to generate and execute"
0 0 25 29 1 #"\n"
0 0 17 3 58
#"; faster code. If arguments violate an unsafe function\342\200\231s"
0 0 25 29 1 #"\n"
0 0 17 3 54
#"; constraints, the function\342\200\231s behavior and result is"
0 0 25 29 1 #"\n"
0 0 17 3 58
#"; unpredictable, and the entire system can crash or become"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; corrupted."
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; These functions apply addition, subtraction, multiplication"
0 0 25 29 1 #"\n"
0 0 17 3 62
#"; and division using unsafe-fx and the bop/is function defined"
0 0 25 29 1 #"\n"
0 0 17 3 8 #"; above."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 4 #"+/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"+/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns1"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"bop/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns1"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns2"
0 0 25 3 1 #" "
0 0 14 3 10 #"unsafe-fx+"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 4 #"-/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"-/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns1"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"bop/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns1"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns2"
0 0 25 3 1 #" "
0 0 14 3 10 #"unsafe-fx-"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 4 #"*/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"*/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns1"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"bop/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns1"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns2"
0 0 25 3 1 #" "
0 0 14 3 10 #"unsafe-fx*"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 4 #"//is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"//is"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns1"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"bop/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns1"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns2"
0 0 25 3 1 #" "
0 0 14 3 17 #"unsafe-fxquotient"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 4 #"r/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"r/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns1"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"bop/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns1"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns2"
0 0 25 3 1 #" "
0 0 14 3 18 #"unsafe-fxremainder"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 4 #"%/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"%/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns1"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"bop/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns1"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns2"
0 0 25 3 1 #" "
0 0 14 3 15 #"unsafe-fxmodulo"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 17 3 22 #";; Scalar ISeries bops"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 59
#"; This function consumes a Fixnum and an integer series and"
0 0 25 29 1 #"\n"
0 0 17 3 35 #"; a binary operation function which"
0 0 25 29 1 #"\n"
0 0 17 3 65
#"; consumes 2 Fixnum's and produces a Fixnum result. This function"
0 0 25 29 1 #"\n"
0 0 17 3 60
#"; is applied to each value in the 2 series at the same index"
0 0 25 29 1 #"\n"
0 0 17 3 64
#"; resulting in a new data point and at the end of the loop a new"
0 0 25 29 1 #"\n"
0 0 17 3 62
#"; data vector. This data vector is the data of the new ISeries"
0 0 25 29 1 #"\n"
0 0 17 3 20 #"; which is returned."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 7 #"bop./is"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"bop./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 3 #"bop"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #") ("
0 0 14 3 12 #"ISeries-data"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 25 3 1 #" "
0 0 14 3 5 #"v-bop"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 4 #") (("
0 0 14 3 4 #"inst"
0 0 25 3 1 #" "
0 0 14 3 11 #"make-vector"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 2 #") "
0 0 14 3 3 #"len"
0 0 25 3 3 #" #{"
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #"}))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"do:"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 3 #" (["
0 0 14 3 3 #"idx"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 10 #"unsafe-fx+"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"       (("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 3 #") ("
0 0 14 3 11 #"new-ISeries"
0 0 25 3 1 #" "
0 0 14 3 5 #"v-bop"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 11 #"vector-set!"
0 0 25 3 1 #" "
0 0 14 3 5 #"v-bop"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 2 #" ("
0 0 14 3 3 #"bop"
0 0 25 3 4 #" #{("
0 0 14 3 10 #"vector-ref"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 2 #") "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 2 #"} "
0 0 14 3 2 #"fx"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; These functions apply addition, subtraction, multiplication"
0 0 25 29 1 #"\n"
0 0 17 3 63
#"; and division using unsafe-fx and the bop./is function defined"
0 0 25 29 1 #"\n"
0 0 17 3 8 #"; above."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"+./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"+./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"bop./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 10 #"unsafe-fx+"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"-./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"-./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"bop./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 10 #"unsafe-fx-"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"*./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"*./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"bop./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 10 #"unsafe-fx*"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"/./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"/./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"bop./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 17 #"unsafe-fxquotient"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"r./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"r./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"bop./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 18 #"unsafe-fxremainder"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"%./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"%./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"bop./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 15 #"unsafe-fxmodulo"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 17 3 22 #";; Binary ISeries comp"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 62
#"; This function consumes 2 integer series and a function which"
0 0 25 29 1 #"\n"
0 0 17 3 67
#"; consumes 2 Fixnum's and produces a Boolean result for comparison."
0 0 25 29 1 #"\n"
0 0 17 3 68
#"; This function is applied to each value in the 2 series at the same"
0 0 25 29 1 #"\n"
0 0 17 3 67
#"; index resulting in a new boolean point and at the end of the loop"
0 0 25 29 1 #"\n"
0 0 17 3 68
#"; a new data vector. This data vector is the data of the new ISeries"
0 0 25 29 1 #"\n"
0 0 17 3 20 #"; which is returned."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 7 #"comp/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"comp/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns1"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns2"
0 0 25 3 1 #" "
0 0 14 3 4 #"comp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 2 #" ("
0 0 14 3 12 #"ISeries-data"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 2 #" ("
0 0 14 3 12 #"ISeries-data"
0 0 25 3 1 #" "
0 0 14 3 3 #"ns2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"unless"
0 0 25 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 0 25 3 3 #"  ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"+/is"
0 0 25 3 1 #" "
0 0 19 3 33 #"\"Series must be of equal length.\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 25 3 1 #" "
0 0 14 3 6 #"v-comp"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 25 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 25 3 3 #") ("
0 0 14 3 11 #"make-vector"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 65
#"; Do loop returns ISeries, idx to 0 and increments by 1 Fixnum on"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 65
#"; each iteration (this is the step-exprs). When the loop has gone"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 65
#"; through the whole vector, the resulting new ISeries is returned"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 30 #"; which the v-bop as the data."
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"do:"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 3 #" (["
0 0 14 3 3 #"idx"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 10 #"unsafe-fx+"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 3 #" #{"
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 4 #"})])"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"       (("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 3 #") ("
0 0 14 3 11 #"new-BSeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"v-comp"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 11 #"vector-set!"
0 0 25 3 1 #" "
0 0 14 3 6 #"v-comp"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 2 #" ("
0 0 14 3 4 #"comp"
0 0 25 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 1 25 65 1 #"\t"
0 1 25 65 1 #"\t"
0 1 25 65 1 #"\t"
0 0 25 3 4 #"   ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 17 3 58
#"; These functions apply various comparison operators using"
0 0 25 29 1 #"\n"
0 0 17 3 51 #"; unsafe-fx and the bop./is function defined above."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 4 #">/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #">/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"is1"
0 0 25 3 1 #" "
0 0 14 3 3 #"is2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"comp/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"is1"
0 0 25 3 1 #" "
0 0 14 3 3 #"is2"
0 0 25 3 1 #" "
0 0 14 3 10 #"unsafe-fx>"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 4 #"</is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"</is"
0 0 25 3 1 #" "
0 0 14 3 3 #"is1"
0 0 25 3 1 #" "
0 0 14 3 3 #"is2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"comp/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"is1"
0 0 25 3 1 #" "
0 0 14 3 3 #"is2"
0 0 25 3 1 #" "
0 0 14 3 10 #"unsafe-fx<"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #">=/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #">=/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"is1"
0 0 25 3 1 #" "
0 0 14 3 3 #"is2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"comp/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"is1"
0 0 25 3 1 #" "
0 0 14 3 3 #"is2"
0 0 25 3 1 #" "
0 0 14 3 11 #"unsafe-fx>="
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"<=/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"<=/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"is1"
0 0 25 3 1 #" "
0 0 14 3 3 #"is2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"comp/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"is1"
0 0 25 3 1 #" "
0 0 14 3 3 #"is2"
0 0 25 3 1 #" "
0 0 14 3 11 #"unsafe-fx<="
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 4 #"=/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"=/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"is1"
0 0 25 3 1 #" "
0 0 14 3 3 #"is2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"comp/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"is1"
0 0 25 3 1 #" "
0 0 14 3 3 #"is2"
0 0 25 3 1 #" "
0 0 14 3 10 #"unsafe-fx="
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"!=/is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"!=/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"is1"
0 0 25 3 1 #" "
0 0 14 3 3 #"is2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"comp/is"
0 0 25 3 1 #" "
0 0 14 3 3 #"is1"
0 0 25 3 1 #" "
0 0 14 3 3 #"is2"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 3 #" (["
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #"] ["
0 0 14 3 1 #"b"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 4 #"]) ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 10 #"unsafe-fx="
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 17 3 22 #";; Scalar ISeries bops"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 59
#"; This function consumes a Fixnum and an integer series and"
0 0 25 29 1 #"\n"
0 0 17 3 35 #"; a binary operation function which"
0 0 25 29 1 #"\n"
0 0 17 3 65
#"; consumes 2 Fixnum's and produces a Fixnum result. This function"
0 0 25 29 1 #"\n"
0 0 17 3 60
#"; is applied to each value in the 2 series at the same index"
0 0 25 29 1 #"\n"
0 0 17 3 64
#"; resulting in a new data point and at the end of the loop a new"
0 0 25 29 1 #"\n"
0 0 17 3 62
#"; data vector. This data vector is the data of the new ISeries"
0 0 25 29 1 #"\n"
0 0 17 3 20 #"; which is returned."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 8 #"comp./is"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"comp./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 4 #"comp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #") ("
0 0 14 3 12 #"ISeries-data"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 25 3 1 #" "
0 0 14 3 5 #"v-bop"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 25 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 25 3 3 #") ("
0 0 14 3 11 #"make-vector"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"do:"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 3 #" (["
0 0 14 3 3 #"idx"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 10 #"unsafe-fx+"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"       (("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 3 #") ("
0 0 14 3 11 #"new-BSeries"
0 0 25 3 1 #" "
0 0 14 3 5 #"v-bop"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 11 #"vector-set!"
0 0 25 3 1 #" "
0 0 14 3 5 #"v-bop"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 2 #" ("
0 0 14 3 4 #"comp"
0 0 25 3 4 #" #{("
0 0 14 3 10 #"vector-ref"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 2 #") "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 2 #"} "
0 0 14 3 2 #"fx"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; These functions apply comparison operations using unsafe-fx"
0 0 25 29 1 #"\n"
0 0 17 3 42 #"; and the comp./is function defined above."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #">./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #">./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 8 #"comp./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 10 #"unsafe-fx>"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"<./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"<./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 8 #"comp./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 10 #"unsafe-fx<"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #">=./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #">=./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 8 #"comp./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 11 #"unsafe-fx>="
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"<=./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"<=./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 8 #"comp./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 11 #"unsafe-fx<="
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"=./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"=./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 8 #"comp./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 10 #"unsafe-fx="
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"!=./is"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"BSeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"!=./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 8 #"comp./is"
0 0 25 3 1 #" "
0 0 14 3 2 #"fx"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 3 #" (["
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #"] ["
0 0 14 3 1 #"b"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 4 #"]) ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 10 #"unsafe-fx="
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 14 #"iseries-filter"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"iseries-filter"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 1 #" "
0 0 14 3 15 #"filter-function"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 11 #"new-ISeries"
0 0 25 3 2 #" ("
0 0 14 3 13 #"vector-filter"
0 0 25 3 1 #" "
0 0 14 3 15 #"filter-function"
0 0 25 3 2 #" ("
0 0 14 3 12 #"ISeries-data"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#f"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 18 #"iseries-filter-not"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 18 #"iseries-filter-not"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 1 #" "
0 0 14 3 15 #"filter-function"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 11 #"new-ISeries"
0 0 25 3 2 #" ("
0 0 14 3 17 #"vector-filter-not"
0 0 25 3 1 #" "
0 0 14 3 15 #"filter-function"
0 0 25 3 2 #" ("
0 0 14 3 12 #"ISeries-data"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#f"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 17 3 18 #";; ISeries agg ops"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 77
(4
 #"; Applies the aggregate function specificed by function-name to the v"
 #"alues in"
) 0 0 25 29 1 #"\n"
0 0 17 3 64
#"; the column-name column. Currently supports 3: sum, avg, count."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 12 #"apply-agg-is"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Symbol"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 4 #"Real"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"apply-agg-is"
0 0 25 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"sum"
0 0 25 3 3 #") ("
0 0 14 3 5 #"apply"
0 0 25 3 1 #" "
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 12 #"vector->list"
0 0 25 3 2 #" ("
0 0 14 3 12 #"ISeries-data"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"mean"
0 0 25 3 3 #") ("
0 0 14 3 4 #"mean"
0 0 25 3 2 #" ("
0 0 14 3 12 #"ISeries-data"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"median"
0 0 25 3 3 #") ("
0 0 14 3 6 #"median"
0 0 25 3 1 #" "
0 0 14 3 1 #"<"
0 0 25 3 2 #" ("
0 0 14 3 12 #"ISeries-data"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 72
(5
 #";[(eq? function-name 'mode) (mode (vector->list (ISeries-data series)"
 #"))]"
) 0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"count"
0 0 25 3 3 #") ("
0 0 14 3 14 #"iseries-length"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"min"
0 0 25 3 3 #") ("
0 0 14 3 13 #"vector-argmin"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 3 #" (["
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #"]) "
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 12 #"ISeries-data"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"max"
0 0 25 3 3 #") ("
0 0 14 3 13 #"vector-argmax"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 3 #" (["
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #"]) "
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 12 #"ISeries-data"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 12 #"apply-agg-is"
0 0 25 3 1 #" "
0 0 19 3 29 #"\"Unknown aggregate function.\""
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 17 3 19 #";; ISeries stat ops"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 13 #"apply-stat-is"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Symbol"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 4 #"Real"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"apply-stat-is"
0 0 25 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 8 #"variance"
0 0 25 3 3 #") ("
0 0 14 3 8 #"variance"
0 0 25 3 2 #" ("
0 0 14 3 12 #"vector->list"
0 0 25 3 2 #" ("
0 0 14 3 12 #"ISeries-data"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"stddev"
0 0 25 3 3 #") ("
0 0 14 3 6 #"stddev"
0 0 25 3 2 #" ("
0 0 14 3 12 #"vector->list"
0 0 25 3 2 #" ("
0 0 14 3 12 #"ISeries-data"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 8 #"skewness"
0 0 25 3 3 #") ("
0 0 14 3 8 #"skewness"
0 0 25 3 2 #" ("
0 0 14 3 12 #"vector->list"
0 0 25 3 2 #" ("
0 0 14 3 12 #"ISeries-data"
0 0 25 3 1 #" "
0 0 14 3 6 #"series"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 13 #"apply-stat-is"
0 0 25 3 1 #" "
0 0 19 3 24 #"\"Unknown stat function.\""
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 17 3 10 #"; indexing"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 21 #"build-labels-by-count"
0 0 25 3 3 #" (("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 5 #"Label"
0 0 25 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 5 #"Label"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 21 #"build-labels-by-count"
0 0 25 3 1 #" "
0 0 14 3 9 #"label-lst"
0 0 25 3 1 #" "
0 0 14 3 9 #"count-lst"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 9 #"label-lst"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 4 #"null"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 6 #"append"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 15 3 9 #"for/list:"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 5 #"Label"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         (["
0 0 14 3 1 #"i"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 9 #"count-lst"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 9 #"label-lst"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"       "
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 21 #"build-labels-by-count"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 9 #"label-lst"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 9 #"count-lst"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 20 #"convert-to-label-lst"
0 0 25 3 3 #" (("
0 0 14 3 1 #"U"
0 0 25 3 1 #" "
0 0 14 3 5 #"Label"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 5 #"Label"
0 0 25 3 3 #")) "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 5 #"Label"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 20 #"convert-to-label-lst"
0 0 25 3 1 #" "
0 0 14 3 5 #"label"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 25 3 1 #" "
0 0 14 3 5 #"label"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 5 #"label"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 5 #"label"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 16 #"define-predicate"
0 0 25 3 1 #" "
0 0 14 3 14 #"ListofBoolean?"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 16 #"define-predicate"
0 0 25 3 1 #" "
0 0 14 3 13 #"ListofFixnum?"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; label based"
0 0 25 29 1 #"\n"
0 0 17 3 30 #"; for two different use cases:"
0 0 25 29 1 #"\n"
0 0 17 3 35 #"; a.) Selecting rows by label/index"
0 0 25 29 1 #"\n"
0 0 17 3 56 #"; b.) Selecting rows with a boolean / conditional lookup"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; Valid inputs"
0 0 25 29 1 #"\n"
0 0 17 3 27 #"; A single label, e.g. 'a'."
0 0 25 29 1 #"\n"
0 0 17 3 44 #"; A list or array of labels ['a', 'b', 'c']."
0 0 25 29 1 #"\n"
0 0 17 3 18 #"; A boolean array."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"true?"
0 0 25 3 2 #" ("
0 0 14 3 7 #"Boolean"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"true?"
0 0 25 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 6 #"false?"
0 0 25 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 19 #"iseries-loc-boolean"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 1 #"U"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 19 #"iseries-loc-boolean"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 1 #" "
0 0 14 3 11 #"boolean-lst"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 4 #"data"
0 0 25 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 4 #"data"
0 0 25 3 2 #" ("
0 0 14 3 12 #"iseries-data"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 8 #"new-data"
0 0 25 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"new-data"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-vector"
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 25 3 1 #" "
0 0 14 3 5 #"true?"
0 0 25 3 1 #" "
0 0 14 3 11 #"boolean-lst"
0 0 25 3 3 #")) "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"data-idx"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 12 #"new-data-idx"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 11 #"boolean-lst"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 25 3 1 #" "
0 0 14 3 11 #"boolean-lst"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 1 #" "
0 0 14 3 4 #"data"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 17 3 15 #"; empty iseries"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 11 #"new-ISeries"
0 0 25 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"       "
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 3 #"for"
0 0 25 3 3 #" (["
0 0 14 3 1 #"b"
0 0 25 3 1 #" "
0 0 14 3 11 #"boolean-lst"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ["
0 0 14 3 1 #"d"
0 0 25 3 1 #" "
0 0 14 3 4 #"data"
0 0 25 3 2 #"])"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 15 3 4 #"when"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 15 3 5 #"begin"
0 0 25 3 14 #"              "
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 11 #"vector-set!"
0 0 25 3 1 #" "
0 0 14 3 8 #"new-data"
0 0 25 3 1 #" "
0 0 14 3 12 #"new-data-idx"
0 0 25 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 1 #" "
0 0 14 3 4 #"data"
0 0 25 3 1 #" "
0 0 14 3 8 #"data-idx"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 12 #"new-data-idx"
0 0 25 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 25 3 1 #" "
0 0 14 3 12 #"new-data-idx"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 8 #"data-idx"
0 0 25 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 25 3 1 #" "
0 0 14 3 8 #"data-idx"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 25 3 1 #" "
0 0 14 3 8 #"new-data"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 1 #" "
0 0 14 3 8 #"new-data"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 11 #"new-ISeries"
0 0 25 3 1 #" "
0 0 14 3 8 #"new-data"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 23 #"iseries-loc-multi-index"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 1 #"U"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"String"
0 0 25 3 2 #") "
0 0 14 3 18 #"ListofListofString"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 1 #"U"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 23 #"iseries-loc-multi-index"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 1 #" "
0 0 14 3 5 #"label"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"unless"
0 0 25 3 2 #" ("
0 0 14 3 13 #"ISeries-index"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 1 #"k"
0 0 25 3 2 #" ("
0 0 14 3 26 #"current-continuation-marks"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 5 #"raise"
0 0 25 3 2 #" ("
0 0 14 3 22 #"make-exn:fail:contract"
0 0 25 3 1 #" "
0 0 19 3 34 #"\"iseries must have a label index.\""
0 0 25 3 1 #" "
0 0 14 3 1 #"k"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 13 #"get-index-val"
0 0 25 3 3 #" (("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"String"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"get-index-val"
0 0 25 3 1 #" "
0 0 14 3 5 #"label"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 14 #"string->symbol"
0 0 25 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 25 3 2 #" ("
0 0 14 3 11 #"string-join"
0 0 25 3 1 #" "
0 0 14 3 5 #"label"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"\\t\""
0 0 25 3 2 #") "
0 0 19 3 4 #"\"\\t\""
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 19 #"ListofListofString?"
0 0 25 3 1 #" "
0 0 14 3 5 #"label"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 11 #"iseries-loc"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 13 #"get-index-val"
0 0 25 3 1 #" "
0 0 14 3 5 #"label"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 11 #"iseries-loc"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 2 #" ("
0 0 14 3 13 #"get-index-val"
0 0 25 3 1 #" "
0 0 14 3 5 #"label"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 11 #"iseries-loc"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 1 #"U"
0 0 25 3 1 #" "
0 0 14 3 5 #"Label"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 5 #"Label"
0 0 25 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 25 3 3 #")) "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 1 #"U"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"iseries-loc"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 1 #" "
0 0 14 3 5 #"label"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"unless"
0 0 25 3 2 #" ("
0 0 14 3 13 #"ISeries-index"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 1 #"k"
0 0 25 3 2 #" ("
0 0 14 3 26 #"current-continuation-marks"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 5 #"raise"
0 0 25 3 2 #" ("
0 0 14 3 22 #"make-exn:fail:contract"
0 0 25 3 1 #" "
0 0 19 3 29 #"\"iseries must have an index.\""
0 0 25 3 1 #" "
0 0 14 3 1 #"k"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 14 #"ListofBoolean?"
0 0 25 3 1 #" "
0 0 14 3 5 #"label"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 19 #"iseries-loc-boolean"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 1 #" "
0 0 14 3 5 #"label"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 25 #"associated-indices-length"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 40 #"                                       ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 3 #" (["
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"Label"
0 0 25 3 4 #"]) ("
0 0 14 3 6 #"length"
0 0 25 3 2 #" ("
0 0 14 3 17 #"iseries-index-ref"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 5 #"))) ("
0 0 14 3 20 #"convert-to-label-lst"
0 0 25 3 1 #" "
0 0 14 3 5 #"label"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 4 #"vals"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 25 3 1 #" "
0 0 14 3 5 #"label"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 14 3 12 #"list->vector"
0 0 25 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 25 3 2 #" ("
0 0 14 3 7 #"flatten"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 3 #" (["
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"Label"
0 0 25 3 4 #"]) ("
0 0 14 3 17 #"iseries-index-ref"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")) "
0 0 14 3 5 #"label"
0 0 25 3 3 #")) "
0 0 14 3 13 #"ListofFixnum?"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 14 3 12 #"list->vector"
0 0 25 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 25 3 2 #" ("
0 0 14 3 17 #"iseries-index-ref"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 1 #" "
0 0 14 3 5 #"label"
0 0 25 3 2 #") "
0 0 14 3 13 #"ListofFixnum?"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 11 #"new-ISeries"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 2 #" ("
0 0 14 3 21 #"build-index-from-list"
0 0 25 3 2 #" ("
0 0 14 3 21 #"build-labels-by-count"
0 0 25 3 2 #" ("
0 0 14 3 20 #"convert-to-label-lst"
0 0 25 3 1 #" "
0 0 14 3 5 #"label"
0 0 25 3 2 #") "
0 0 14 3 25 #"associated-indices-length"
0 0 25 3 7 #")))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #"; vector 0..n index based"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 12 #"iseries-iloc"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ("
0 0 14 3 1 #"U"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 3 #")) "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 1 #"U"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"iseries-iloc"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 10 #"referencer"
0 0 25 3 2 #" ("
0 0 14 3 18 #"iseries-referencer"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 17 3 53 #"; get labels from SIndex that refer to given indicies"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 17 3 66
#"; make a new index from these labels using build-index-from-labels"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 17 3 69
(6
 #"; sub-vector the data vector to get the data and create a new-ISeries"
) 0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 11 #"new-ISeries"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 15 3 11 #"for/vector:"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 4 #") (["
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 2 #"])"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 10 #"referencer"
0 0 25 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 14 3 6 #"index?"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 13 #"ISeries-index"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 22 3 2 #"#f"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 21 #"build-index-from-list"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 3 #" (["
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 4 #"]) ("
0 0 14 3 8 #"idx->key"
0 0 25 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 25 3 2 #" ("
0 0 14 3 13 #"ISeries-index"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 3 #")) "
0 0 14 3 1 #"i"
0 0 25 3 3 #")) "
0 0 14 3 3 #"idx"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 10 #"referencer"
0 0 25 3 1 #" "
0 0 14 3 3 #"idx"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 18 #"iseries-iloc-range"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 18 #"iseries-iloc-range"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 1 #" "
0 0 14 3 5 #"start"
0 0 25 3 1 #" "
0 0 14 3 3 #"end"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 32 #"; use vector-copy library method"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 11 #"new-ISeries"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 11 #"vector-copy"
0 0 25 3 2 #" ("
0 0 14 3 12 #"iseries-data"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 2 #") "
0 0 14 3 5 #"start"
0 0 25 3 1 #" "
0 0 14 3 3 #"end"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 13 #"ISeries-index"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"       "
0 0 22 3 2 #"#f"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 21 #"build-index-from-list"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 3 #" (["
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"Index"
0 0 25 3 4 #"]) ("
0 0 14 3 8 #"idx->key"
0 0 25 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 25 3 2 #" ("
0 0 14 3 13 #"ISeries-index"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 3 #")) "
0 0 14 3 1 #"i"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"range"
0 0 25 3 1 #" "
0 0 14 3 5 #"start"
0 0 25 3 1 #" "
0 0 14 3 3 #"end"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 17 3 18 #";; ISeries groupby"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 25 3 1 #" "
0 0 14 3 3 #"Key"
0 0 25 3 1 #" "
0 0 14 3 6 #"String"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 25 3 1 #" "
0 0 14 3 9 #"GroupHash"
0 0 25 3 2 #" ("
0 0 14 3 9 #"HashTable"
0 0 25 3 1 #" "
0 0 14 3 3 #"Key"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; This function is self-explanatory, it consumes no arguments"
0 0 25 29 1 #"\n"
0 0 17 3 57 #"; and creates a hash map which will represent a JoinHash."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 15 #"make-group-hash"
0 0 25 3 2 #" ("
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 9 #"GroupHash"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"make-group-hash"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"make-hash"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 121
(7
 #"; Used to determine the groups for the groupby. If by is a function, "
 #"it\xE2\x80\x99s called on each value of the object\xE2\x80\x99s index"
 #"."
) 0 0 25 29 1 #"\n"
0 0 17 3 84
(8
 #"; The Series VALUES will be used to determine the groups if by-value "
 #"is set to true."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 15 #"iseries-groupby"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ISeries"
0 0 25 3 2 #" ["
0 0 24 3 10 #"#:by-value"
0 0 25 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 25 3 2 #"] "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 9 #"GroupHash"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"iseries-groupby"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 1 #" "
0 0 24 3 10 #"#:by-value"
0 0 25 3 2 #" ["
0 0 14 3 8 #"by-value"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #"])"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 25 3 1 #" "
0 0 14 3 11 #"group-index"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 9 #"GroupHash"
0 0 25 3 2 #" ("
0 0 14 3 15 #"make-group-hash"
0 0 25 3 4 #"))  "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 3 #"len"
0 0 25 3 2 #" ("
0 0 14 3 14 #"iseries-length"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 1 #"k"
0 0 25 3 2 #" ("
0 0 14 3 26 #"current-continuation-marks"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 0 25 3 1 #"("
0 0 14 3 5 #"raise"
0 0 25 3 2 #" ("
0 0 14 3 22 #"make-exn:fail:contract"
0 0 25 3 1 #" "
0 0 19 3 36 #"\"iseries can't be empty on groupby.\""
0 0 25 3 1 #" "
0 0 14 3 1 #"k"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 0 25 3 1 #"("
0 0 15 3 5 #"begin"
0 0 25 3 10 #"          "
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 0 25 3 3 #"  ("
0 0 15 3 2 #"do"
0 0 25 3 3 #" (("
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 0 25 3 8 #"      (("
0 0 14 3 2 #">="
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 2 #") "
0 0 14 3 11 #"group-index"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (("
0 0 14 3 10 #"fixnum-val"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 1 #"U"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 25 3 3 #") ("
0 0 14 3 12 #"iseries-iloc"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 14 3 6 #"index?"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 11 #"fixnum-list"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #") ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 7 #"fixnum?"
0 0 25 3 1 #" "
0 0 14 3 10 #"fixnum-val"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 10 #"fixnum-val"
0 0 25 3 3 #") ("
0 0 14 3 12 #"vector->list"
0 0 25 3 2 #" ("
0 0 14 3 12 #"ISeries-data"
0 0 25 3 1 #" "
0 0 14 3 10 #"fixnum-val"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 3 #"key"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 8 #"by-value"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ("
0 0 14 3 6 #"assert"
0 0 25 3 2 #" ("
0 0 14 3 12 #"iseries-iloc"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 14 3 6 #"index?"
0 0 25 3 3 #")) "
0 0 14 3 7 #"fixnum?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 13 #"ISeries-index"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                ("
0 0 14 3 8 #"idx->key"
0 0 25 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 25 3 2 #" ("
0 0 14 3 13 #"ISeries-index"
0 0 25 3 1 #" "
0 0 14 3 7 #"iseries"
0 0 25 3 4 #")) ("
0 0 14 3 6 #"assert"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 14 3 6 #"index?"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                ("
0 0 14 3 6 #"assert"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 14 3 6 #"index?"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 7 #"key-str"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"String"
0 0 25 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 40 #"                                      [("
0 0 14 3 7 #"symbol?"
0 0 25 3 1 #" "
0 0 14 3 3 #"key"
0 0 25 3 3 #") ("
0 0 14 3 14 #"symbol->string"
0 0 25 3 1 #" "
0 0 14 3 3 #"key"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 40 #"                                      [("
0 0 14 3 7 #"number?"
0 0 25 3 1 #" "
0 0 14 3 3 #"key"
0 0 25 3 3 #") ("
0 0 14 3 14 #"number->string"
0 0 25 3 1 #" "
0 0 14 3 3 #"key"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 38 #"                                      "
0 0 17 3 29 #"; pretty-format anything else"
0 0 25 29 1 #"\n"
0 0 25 3 39 #"                                      ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 13 #"pretty-format"
0 0 25 3 1 #" "
0 0 14 3 3 #"key"
0 0 25 3 19 #")])))              "
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 12 #"hash-update!"
0 0 25 3 1 #" "
0 0 14 3 11 #"group-index"
0 0 25 3 1 #" "
0 0 14 3 7 #"key-str"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 1 25 65 1 #"\t"
0 1 25 65 1 #"\t"
0 0 25 3 7 #"      ("
0 0 15 3 3 #"\316\273:"
0 0 25 3 3 #" (("
0 0 14 3 3 #"val"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 35 #")))                                "
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 1 25 65 1 #"\t"
0 1 25 65 1 #"\t"
0 1 25 65 1 #"\t"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"append"
0 0 25 3 1 #" "
0 0 14 3 11 #"fixnum-list"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 1 25 65 1 #"\t"
0 1 25 65 1 #"\t"
0 1 25 65 1 #"\t"
0 0 25 3 7 #"      ("
0 0 15 3 2 #"\316\273"
0 0 25 3 5 #" () ("
0 0 14 3 4 #"list"
0 0 25 3 9 #")))))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 25 29 1 #"\n"
0 0 17 3 18 #";; ISeries agg ops"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 77 4 0 0 25 29 1 #"\n"
0 0 17 3 73
(9
 #"; the column-name column. Currently supports 5: sum, mean, median, co"
 #"unt."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 17 #"apply-agg-iseries"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Symbol"
0 0 25 3 1 #" "
0 0 14 3 9 #"GroupHash"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 9 #"GenSeries"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 17 #"apply-agg-iseries"
0 0 25 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 25 3 1 #" "
0 0 14 3 10 #"group-hash"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 2 #" ("
0 0 14 3 10 #"hash-count"
0 0 25 3 1 #" "
0 0 14 3 10 #"group-hash"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 14 #"agg-value-hash"
0 0 25 3 1 #" "
0 0 14 3 12 #"AggValueHash"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 14 #"agg-value-hash"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 13 #"hash-for-each"
0 0 25 3 1 #" "
0 0 14 3 10 #"group-hash"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 15 3 6 #"lambda"
0 0 25 3 3 #" (["
0 0 14 3 3 #"key"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"String"
0 0 25 3 3 #"] ["
0 0 14 3 3 #"val"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                   "
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 3 #"key"
0 0 25 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 25 3 1 #" "
0 0 14 3 3 #"key"
0 0 25 3 1 #" "
0 0 14 3 7 #"string?"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 14 3 3 #"val"
0 0 25 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 25 3 2 #" ("
0 0 14 3 7 #"flatten"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 2 #") "
0 0 14 3 13 #"ListofFixnum?"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                     ("
0 0 14 3 9 #"hash-set!"
0 0 25 3 1 #" "
0 0 14 3 14 #"agg-value-hash"
0 0 25 3 1 #" "
0 0 14 3 3 #"key"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                ("
0 0 15 3 4 #"cond"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                  [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"sum"
0 0 25 3 3 #") ("
0 0 14 3 5 #"apply"
0 0 25 3 1 #" "
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                  [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"mean"
0 0 25 3 3 #") ("
0 0 14 3 4 #"mean"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                  [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"median"
0 0 25 3 3 #") ("
0 0 14 3 6 #"median"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 3 #" (["
0 0 14 3 4 #"val1"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 3 #"] ["
0 0 14 3 4 #"val2"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 25 3 4 #"]) ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 4 #"val1"
0 0 25 3 1 #" "
0 0 14 3 4 #"val2"
0 0 25 3 3 #")) "
0 0 14 3 3 #"val"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 34 #"                                  "
0 0 17 3 72 5 0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                  [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"count"
0 0 25 3 3 #") ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                  [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"min"
0 0 25 3 3 #") ("
0 0 14 3 6 #"argmin"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 3 #" (["
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 4 #"Real"
0 0 25 3 3 #"]) "
0 0 14 3 1 #"x"
0 0 25 3 2 #") "
0 0 14 3 3 #"val"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                  [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"max"
0 0 25 3 3 #") ("
0 0 14 3 6 #"argmax"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 3 #" (["
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 4 #"Real"
0 0 25 3 3 #"]) "
0 0 14 3 1 #"x"
0 0 25 3 2 #") "
0 0 14 3 3 #"val"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 35 #"                                  ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 20 #"apply-agg-data-frame"
0 0 25 3 1 #" "
0 0 19 3 29 #"\"Unknown aggregate function.\""
0 0 25 3 7 #")])))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 28 #"agg-value-hash-to-gen-series"
0 0 25 3 1 #" "
0 0 14 3 14 #"agg-value-hash"
0 0 25 3 2 #"))"
0           0
