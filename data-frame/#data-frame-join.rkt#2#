#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 86 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
49 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
50 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 14 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 63 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 190 190 190 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 107 142 35 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 100 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 100 149 237 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 65 105 225 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 70 130 180 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 47 79 79 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 139 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 75 0 130 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 160 32 240 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 250 128 114 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 184 134 11 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 128 128 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 169 169 169 0 0 0 -1 -1 62
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 23 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
21 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 7062 0 17 3 29 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";*    Author: Shubham Kahal"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";*    File: data-frame-join.rkt"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 28 3 23 #"#lang typed/racket/base"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 14 #"typed/rackunit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; data-frame-join rough draft"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; **************************"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; Test cases are at bottom"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; of file."
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; **************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; Provide functions in this file to other files."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"provide:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ["
0 0 14 3 20 #"data-frame-join-left"
0 0 24 3 2 #" ("
0 0 14 3 9 #"DataFrame"
0 0 24 3 1 #" "
0 0 14 3 9 #"DataFrame"
0 0 24 3 2 #" ["
0 0 23 3 4 #"#:on"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 3 #")] "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 9 #"DataFrame"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 13 #"racket/pretty"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 17 #"racket/unsafe/ops"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 13 #"racket/flonum"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 10 #"racket/set"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 14 3 10 #"racket/set"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 3 #"set"
0 0 24 3 1 #" "
0 0 14 3 11 #"set-member?"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 9 #"list->set"
0 0 24 3 1 #" "
0 0 14 3 9 #"set->list"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 13 #"set-intersect"
0 0 24 3 1 #" "
0 0 14 3 12 #"set-subtract"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 14 3 16 #"grip/data/symbol"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 13 #"symbol-prefix"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"indexed-series.rkt\""
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 5 #"Label"
0 0 24 3 1 #" "
0 0 14 3 8 #"Labeling"
0 0 24 3 1 #" "
0 0 14 3 15 #"LabelProjection"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"series.rkt\""
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 15 #"series-complete"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"series-description.rkt\""
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 10 #"SeriesType"
0 0 24 3 1 #" "
0 0 14 3 6 #"Series"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 22 #"SeriesDescription-type"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 11 #"series-type"
0 0 24 3 1 #" "
0 0 14 3 13 #"series-length"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 11 #"series-data"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"data-frame.rkt\""
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 9 #"DataFrame"
0 0 24 3 1 #" "
0 0 14 3 14 #"new-data-frame"
0 0 24 3 1 #" "
0 0 14 3 16 #"data-frame-names"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 18 #"data-frame-cseries"
0 0 24 3 1 #" "
0 0 14 3 18 #"data-frame-explode"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 20 #"DataFrameDescription"
0 0 24 3 1 #" "
0 0 14 3 27 #"DataFrameDescription-series"
0 0 24 3 1 #" "
0 0 14 3 22 #"data-frame-description"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"numeric-series.rkt\""
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 7 #"NSeries"
0 0 24 3 1 #" "
0 0 14 3 8 #"NSeries?"
0 0 24 3 1 #" "
0 0 14 3 12 #"nseries-iref"
0 0 24 3 1 #" "
0 0 14 3 17 #"nseries-label-ref"
0 0 24 3 1 #" "
0 0 14 3 11 #"new-NSeries"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"integer-series.rkt\""
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 7 #"ISeries"
0 0 24 3 1 #" "
0 0 14 3 8 #"ISeries?"
0 0 24 3 1 #" "
0 0 14 3 12 #"iseries-iref"
0 0 24 3 1 #" "
0 0 14 3 11 #"new-ISeries"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 18 #"iseries-referencer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"categorical-series.rkt\""
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 18 #"cseries-referencer"
0 0 24 3 1 #" "
0 0 14 3 14 #"cseries-length"
0 0 24 3 1 #" "
0 0 14 3 12 #"cseries-iref"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 7 #"CSeries"
0 0 24 3 1 #" "
0 0 14 3 8 #"CSeries?"
0 0 24 3 1 #" "
0 0 14 3 11 #"new-CSeries"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"series-builder.rkt\""
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 13 #"SeriesBuilder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"integer-series-builder.rkt\""
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 14 #"ISeriesBuilder"
0 0 24 3 1 #" "
0 0 14 3 15 #"ISeriesBuilder?"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 21 #"append-ISeriesBuilder"
0 0 24 3 1 #" "
0 0 14 3 23 #"complete-ISeriesBuilder"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 18 #"new-ISeriesBuilder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"categorical-series-builder.rkt\""
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 14 #"CSeriesBuilder"
0 0 24 3 1 #" "
0 0 14 3 15 #"CSeriesBuilder?"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 21 #"append-CSeriesBuilder"
0 0 24 3 1 #" "
0 0 14 3 23 #"complete-CSeriesBuilder"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 18 #"new-CSeriesBuilder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"categorical-series-ops.rkt\""
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 14 #"cseries-append"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"numeric-series-builder.rkt\""
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 14 #"NSeriesBuilder"
0 0 24 3 1 #" "
0 0 14 3 15 #"NSeriesBuilder?"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 21 #"append-NSeriesBuilder"
0 0 24 3 1 #" "
0 0 14 3 23 #"complete-NSeriesBuilder"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 18 #"new-NSeriesBuilder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"data-frame-print.rkt\""
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 15 #"frame-write-tab"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Pair"
0 0 24 3 1 #" "
0 0 14 3 5 #"Label"
0 0 24 3 1 #" "
0 0 14 3 6 #"Series"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"Key"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 8 #"JoinHash"
0 0 24 3 2 #" ("
0 0 14 3 9 #"HashTable"
0 0 24 3 1 #" "
0 0 14 3 3 #"Key"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Index"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 15 #"IndexableSeries"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 14 3 7 #"CSeries"
0 0 24 3 1 #" "
0 0 14 3 7 #"ISeries"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"key-delimiter"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\t\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; This function consumes a Column and returns the series of"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; the Column which is just the second element of the list."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 13 #"column-series"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Column"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"Series"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"column-series"
0 0 24 3 1 #" "
0 0 14 3 4 #"scol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"scol"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; This function consumes a Column, Setof Label and String"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; and checks if the column name of Column is a member of the"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; given Setof Label, and if it is, it prepends the prefix"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; to the column name and returns that new value. Used for"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; join column names."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 16 #"join-column-name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Column"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Setof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Label"
0 0 24 3 2 #") "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"join-column-name"
0 0 24 3 1 #" "
0 0 14 3 6 #"column"
0 0 24 3 1 #" "
0 0 14 3 11 #"common-cols"
0 0 24 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 7 #"colname"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"column"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 11 #"set-member?"
0 0 24 3 1 #" "
0 0 14 3 11 #"common-cols"
0 0 24 3 1 #" "
0 0 14 3 7 #"colname"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 13 #"symbol-prefix"
0 0 24 3 1 #" "
0 0 14 3 7 #"colname"
0 0 24 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 14 3 7 #"colname"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; This function consumes a DataFrameDescription and an Index"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; and returns new default series builders of the the given"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; length. There will be as many series as there are in the"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; DataFrameDecsription."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 28 #"dest-mapping-series-builders"
0 0 24 3 2 #" ("
0 0 14 3 20 #"DataFrameDescription"
0 0 24 3 1 #" "
0 0 14 3 5 #"Index"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 13 #"SeriesBuilder"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 28 #"dest-mapping-series-builders"
0 0 24 3 1 #" "
0 0 14 3 22 #"data-frame-description"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"for/list:"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 13 #"SeriesBuilder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"     (["
0 0 14 3 6 #"series"
0 0 24 3 2 #" ("
0 0 14 3 27 #"DataFrameDescription-series"
0 0 24 3 1 #" "
0 0 14 3 22 #"data-frame-description"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"     ("
0 0 15 3 4 #"case"
0 0 24 3 2 #" ("
0 0 14 3 22 #"SeriesDescription-type"
0 0 24 3 1 #" "
0 0 14 3 6 #"series"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 9 #"       (("
0 0 14 3 17 #"CategoricalSeries"
0 0 24 3 3 #") ("
0 0 14 3 18 #"new-CSeriesBuilder"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 9 #"       (("
0 0 14 3 13 #"NumericSeries"
0 0 24 3 7 #")     ("
0 0 14 3 18 #"new-NSeriesBuilder"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 9 #"       (("
0 0 14 3 13 #"IntegerSeries"
0 0 24 3 7 #")     ("
0 0 14 3 18 #"new-ISeriesBuilder"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 28 #"dest-mapping-series-builders"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"    "
0 0 19 3 25 #"\"Unknown series type ~a.\""
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 22 #"SeriesDescription-type"
0 0 24 3 1 #" "
0 0 14 3 6 #"series"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; This function consumes a Listof Columns and alphabetically"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; sorts it on the column name and returns new sorted list."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 21 #"key-cols-sort-lexical"
0 0 24 3 3 #" (("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"key-cols-sort-lexical"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (("
0 0 14 3 4 #"inst"
0 0 24 3 1 #" "
0 0 14 3 4 #"sort"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 4 #"cols"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 3 #"\316\273:"
0 0 24 3 3 #" (("
0 0 14 3 3 #"kc1"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 3 #") ("
0 0 14 3 3 #"kc2"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 9 #"string<=?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"kc1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"kc2"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; This function consumes a Listof Column and filteres it for"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; only columns of CSeries or ISeries and returns those series"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; in list form."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 15 #"key-cols-series"
0 0 24 3 3 #" (("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 15 #"IndexableSeries"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"key-cols-series"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 3 #"\316\273:"
0 0 24 3 3 #" (("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Series"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 8 #"CSeries?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 8 #"ISeries?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 13 #"column-series"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; This function consumes a Listof IndexableSeries and builds key"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; string from the columns of a frame and a given set of col labels t"
 #"o use."
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; Insert a tab char between each key value, e.g., k1 + \\t + k2 + \\"
 #"t + ..."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"key-fn"
0 0 24 3 3 #" (("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 15 #"IndexableSeries"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Index"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"Key"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"key-fn"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let:"
0 0 24 3 3 #" (("
0 0 14 3 8 #"col-refs"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Index"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 14 3 5 #"Label"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 3 #"col"
0 0 24 3 2 #" ("
0 0 14 3 7 #"in-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"CSeries?"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 18 #"cseries-referencer"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 18 #"iseries-referencer"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 15 3 3 #"\316\273:"
0 0 24 3 3 #" (("
0 0 14 3 6 #"row-id"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Index"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"outp"
0 0 24 3 2 #" ("
0 0 14 3 18 #"open-output-string"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 7 #"col-ref"
0 0 24 3 2 #" ("
0 0 14 3 7 #"in-list"
0 0 24 3 1 #" "
0 0 14 3 8 #"col-refs"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 15 3 5 #"let*:"
0 0 24 3 3 #" (("
0 0 14 3 3 #"seg"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 3 #") ("
0 0 14 3 7 #"col-ref"
0 0 24 3 1 #" "
0 0 14 3 6 #"row-id"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 7 #"seg-str"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 3 #"seg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 1 #" "
0 0 14 3 3 #"seg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 3 #"seg"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 7 #"seg-str"
0 0 24 3 1 #" "
0 0 14 3 4 #"outp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 13 #"key-delimiter"
0 0 24 3 1 #" "
0 0 14 3 4 #"outp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 14 3 17 #"get-output-string"
0 0 24 3 1 #" "
0 0 14 3 4 #"outp"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; This function is self-explanatory, it consumes no arguments"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; and creates a hash map which will representa JoinHash."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"make-index"
0 0 24 3 2 #" ("
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 8 #"JoinHash"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-index"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-hash"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; This function consumes a Listof IndexableSeries and creates"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; a JoinHash"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 3 #" (("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 15 #"IndexableSeries"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 8 #"JoinHash"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"JoinHash"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-index"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 41 #"; Get length of one of the IndexablSeries"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 2 #" ("
0 0 14 3 13 #"series-length"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 10 #"series-key"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Index"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 3 #") ("
0 0 14 3 6 #"key-fn"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 4 #"loop"
0 0 24 3 3 #" (["
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 11 #"unsafe-fx>="
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 14 3 5 #"index"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 15 3 4 #"let:"
0 0 24 3 3 #" (("
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Index"
0 0 24 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 6 #"index?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"key"
0 0 24 3 2 #" ("
0 0 14 3 10 #"series-key"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 12 #"hash-update!"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"\316\273:"
0 0 24 3 3 #" (("
0 0 14 3 3 #"idx"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Index"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 3 #"idx"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 15 3 2 #"\316\273"
0 0 24 3 5 #" () ("
0 0 14 3 4 #"list"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"loop"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; This function consumes a CSeries and a CSeriesBuilder and"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; returns a function which consumes an index which indexes into"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; the CSeries and retrieves the item to append onto the"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; CSeriesBuilder."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 15 #"cseries-copy-fn"
0 0 24 3 2 #" ("
0 0 14 3 7 #"CSeries"
0 0 24 3 1 #" "
0 0 14 3 14 #"CSeriesBuilder"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Index"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Void"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"cseries-copy-fn"
0 0 24 3 1 #" "
0 0 14 3 6 #"series"
0 0 24 3 1 #" "
0 0 14 3 7 #"builder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 11 #"cseries-ref"
0 0 24 3 2 #" ("
0 0 14 3 18 #"cseries-referencer"
0 0 24 3 1 #" "
0 0 14 3 6 #"series"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"\316\273:"
0 0 24 3 3 #" (("
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Index"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 21 #"append-CSeriesBuilder"
0 0 24 3 1 #" "
0 0 14 3 7 #"builder"
0 0 24 3 2 #" ("
0 0 14 3 11 #"cseries-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; This function is self explanatory, returns a formated error"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; on a copy column row error."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 21 #"copy-column-row-error"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Series"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Void"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"copy-column-row-error"
0 0 24 3 1 #" "
0 0 14 3 6 #"series"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 20 #"data-frame-join-left"
0 0 24 3 1 #" "
0 0 19 3 62
#"\"Invalid target builder for data-frame column series ~s at ~s\""
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 11 #"series-type"
0 0 24 3 1 #" "
0 0 14 3 6 #"series"
0 0 24 3 2 #") "
0 0 14 3 3 #"col"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; This functions consumes a Vectorof Series and Vectorof SeriesBuild"
 #"er"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; and an Index and does not return any value. It copies an entire ro"
 #"w"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; from the given Vectorof Series into the given Vectorof SeriesBuild"
 #"ers."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 15 #"copy-column-row"
0 0 24 3 3 #" (("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Series"
0 0 24 3 3 #") ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 13 #"SeriesBuilder"
0 0 24 3 2 #") "
0 0 14 3 5 #"Index"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Void"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"copy-column-row"
0 0 24 3 1 #" "
0 0 14 3 10 #"src-series"
0 0 24 3 1 #" "
0 0 14 3 13 #"dest-builders"
0 0 24 3 1 #" "
0 0 14 3 6 #"row-id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;  (when (zero? (modulo row-id 10000))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 1 17 65 1 #"\t"
0 0 17 3 43 #"(displayln (format \"Copy row: ~a\" row-id)))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 3 #"col"
0 0 24 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 24 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 24 3 1 #" "
0 0 14 3 10 #"src-series"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 76
(
 #"; Loop through each column and get the associated series and series "
 #"builder."
) 0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"series"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"src-series"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"builder"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 13 #"dest-builders"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 69
(
 #"; Copy specific row values into correct series builders. If series i"
 #"s"
) 0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 71
(
 #"; a NSeries then associated value will be appended onto NSeriesBuild"
 #"er,"
) 0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 40 #"; and same goes for ISeries and CSeries."
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"  (("
0 0 14 3 8 #"NSeries?"
0 0 24 3 1 #" "
0 0 14 3 6 #"series"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 15 3 4 #"let:"
0 0 24 3 3 #" (("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Float"
0 0 24 3 2 #" ("
0 0 14 3 12 #"nseries-iref"
0 0 24 3 1 #" "
0 0 14 3 6 #"series"
0 0 24 3 1 #" "
0 0 14 3 6 #"row-id"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"NSeriesBuilder?"
0 0 24 3 1 #" "
0 0 14 3 7 #"builder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"     ("
0 0 14 3 21 #"append-NSeriesBuilder"
0 0 24 3 1 #" "
0 0 14 3 7 #"builder"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"     ("
0 0 14 3 21 #"copy-column-row-error"
0 0 24 3 1 #" "
0 0 14 3 6 #"series"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"  (("
0 0 14 3 8 #"CSeries?"
0 0 24 3 1 #" "
0 0 14 3 6 #"series"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 15 3 4 #"let:"
0 0 24 3 3 #" (("
0 0 14 3 3 #"nom"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Label"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cseries-iref"
0 0 24 3 1 #" "
0 0 14 3 6 #"series"
0 0 24 3 1 #" "
0 0 14 3 6 #"row-id"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"CSeriesBuilder?"
0 0 24 3 1 #" "
0 0 14 3 7 #"builder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"     ("
0 0 14 3 21 #"append-CSeriesBuilder"
0 0 24 3 1 #" "
0 0 14 3 7 #"builder"
0 0 24 3 1 #" "
0 0 14 3 3 #"nom"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"     ("
0 0 14 3 21 #"copy-column-row-error"
0 0 24 3 1 #" "
0 0 14 3 6 #"series"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"  (("
0 0 14 3 8 #"ISeries?"
0 0 24 3 1 #" "
0 0 14 3 6 #"series"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 15 3 4 #"let:"
0 0 24 3 3 #" (("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 24 3 2 #" ("
0 0 14 3 12 #"iseries-iref"
0 0 24 3 1 #" "
0 0 14 3 6 #"series"
0 0 24 3 1 #" "
0 0 14 3 6 #"row-id"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"ISeriesBuilder?"
0 0 24 3 1 #" "
0 0 14 3 7 #"builder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"     ("
0 0 14 3 21 #"append-ISeriesBuilder"
0 0 24 3 1 #" "
0 0 14 3 7 #"builder"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"     ("
0 0 14 3 21 #"copy-column-row-error"
0 0 24 3 1 #" "
0 0 14 3 6 #"series"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; This functions consumes a Vectorof Series and Vectorof SeriesBuild"
 #"er"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; and an Index and does not return any value. It copies an entire ro"
 #"w"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; from the given Vectorof Series into the given Vectorof SeriesBuild"
 #"ers."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 16 #"copy-null-to-row"
0 0 24 3 3 #" (("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Series"
0 0 24 3 3 #") ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 13 #"SeriesBuilder"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Void"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"copy-null-to-row"
0 0 24 3 1 #" "
0 0 14 3 10 #"src-series"
0 0 24 3 1 #" "
0 0 14 3 13 #"dest-builders"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;  (when (zero? (modulo row-id 10000))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 1 17 65 1 #"\t"
0 0 17 3 43 #"(displayln (format \"Copy row: ~a\" row-id)))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 3 #"col"
0 0 24 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 24 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 24 3 1 #" "
0 0 14 3 10 #"src-series"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 76
(
 #"; Loop through each column and get the associated series and series "
 #"builder."
) 0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"series"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"src-series"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"builder"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 13 #"dest-builders"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 69
(
 #"; Copy specific row values into correct series builders. If series i"
 #"s"
) 0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 71
(
 #"; a NSeries then associated value will be appended onto NSeriesBuild"
 #"er,"
) 0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 40 #"; and same goes for ISeries and CSeries."
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"  (("
0 0 14 3 8 #"NSeries?"
0 0 24 3 1 #" "
0 0 14 3 6 #"series"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"NSeriesBuilder?"
0 0 24 3 1 #" "
0 0 14 3 7 #"builder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 21 #"append-NSeriesBuilder"
0 0 24 3 1 #" "
0 0 14 3 7 #"builder"
0 0 24 3 1 #" "
0 0 21 3 4 #"-1.0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 21 #"copy-column-row-error"
0 0 24 3 1 #" "
0 0 14 3 6 #"series"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"  (("
0 0 14 3 8 #"CSeries?"
0 0 24 3 1 #" "
0 0 14 3 6 #"series"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"CSeriesBuilder?"
0 0 24 3 1 #" "
0 0 14 3 7 #"builder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 21 #"append-CSeriesBuilder"
0 0 24 3 1 #" "
0 0 14 3 7 #"builder"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"null"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 21 #"copy-column-row-error"
0 0 24 3 1 #" "
0 0 14 3 6 #"series"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"  (("
0 0 14 3 8 #"ISeries?"
0 0 24 3 1 #" "
0 0 14 3 6 #"series"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"ISeriesBuilder?"
0 0 24 3 1 #" "
0 0 14 3 7 #"builder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 21 #"append-ISeriesBuilder"
0 0 24 3 1 #" "
0 0 14 3 7 #"builder"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 21 #"copy-column-row-error"
0 0 24 3 1 #" "
0 0 14 3 6 #"series"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; This function consumes two Vectorof Series and two Vectorof"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; SeriesBuilder. The types of Series and SeriesBuilder must"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; match in the respective indicies."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 24 #"do-join-build-left/right"
0 0 24 3 3 #" (("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Series"
0 0 24 3 3 #") ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Series"
0 0 24 3 3 #") ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Series"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 13 #"SeriesBuilder"
0 0 24 3 3 #") ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 13 #"SeriesBuilder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"Index"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"Key"
0 0 24 3 2 #") "
0 0 14 3 8 #"JoinHash"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Void"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 24 #"do-join-build-left/right"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-cols"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-cols"
0 0 24 3 1 #" "
0 0 14 3 12 #"b-cols-match"
0 0 24 3 1 #" "
0 0 14 3 10 #"a-builders"
0 0 24 3 1 #" "
0 0 14 3 10 #"b-builders"
0 0 24 3 1 #" "
0 0 14 3 10 #"dfa-key-fn"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-hash"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 9 #"a-col-cnt"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 24 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-cols"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 9 #"b-col-cnt"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 24 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-cols"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-len"
0 0 24 3 3 #"   "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 24 3 2 #" ("
0 0 14 3 13 #"series-length"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-cols"
0 0 24 3 3 #" #{"
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Index"
0 0 24 3 5 #"} )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (("
0 0 14 3 7 #"dfa-row"
0 0 24 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-len"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 5 #"let*:"
0 0 24 3 3 #" (("
0 0 14 3 7 #"dfa-row"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Index"
0 0 24 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-row"
0 0 24 3 1 #" "
0 0 14 3 6 #"index?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ("
0 0 14 3 7 #"dfa-key"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Key"
0 0 24 3 2 #" ("
0 0 14 3 10 #"dfa-key-fn"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-row"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"dfb-rows"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-hash"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-key"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 4 #" () "
0 0 21 3 1 #"'"
0 0 24 3 6 #"()))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 9 #"displayln"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"Hash join: ~s ~s, ~s\""
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-row"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-key"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfb-rows"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfb-rows"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 15 #"copy-column-row"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-cols"
0 0 24 3 1 #" "
0 0 14 3 10 #"a-builders"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-row"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 17 3 19 #"; Copy nans into fb"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 16 #"copy-null-to-row"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-cols"
0 0 24 3 1 #" "
0 0 14 3 10 #"b-builders"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 17 3 44 #";(copy-null-to-row b-cols-match b-builders))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 7 #"dfb-row"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfb-rows"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 17 3 48 #"; maps possible multiple rows from b to row in a"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 15 #"copy-column-row"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-cols"
0 0 24 3 1 #" "
0 0 14 3 10 #"a-builders"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-row"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 15 #"copy-column-row"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-cols"
0 0 24 3 1 #" "
0 0 14 3 10 #"b-builders"
0 0 24 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfb-row"
0 0 24 3 1 #" "
0 0 14 3 6 #"index?"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; This function consumes two Vectorof Series and two Vectorof"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; SeriesBuilder. The types of Series and SeriesBuilder must"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; match in the respective indicies."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 19 #"do-join-build-inner"
0 0 24 3 3 #" (("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Series"
0 0 24 3 3 #") ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Series"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 13 #"SeriesBuilder"
0 0 24 3 3 #") ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 13 #"SeriesBuilder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"Index"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"Key"
0 0 24 3 2 #") "
0 0 14 3 8 #"JoinHash"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Void"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"do-join-build-inner"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-cols"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-cols"
0 0 24 3 1 #" "
0 0 14 3 10 #"a-builders"
0 0 24 3 1 #" "
0 0 14 3 10 #"b-builders"
0 0 24 3 1 #" "
0 0 14 3 10 #"dfa-key-fn"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-hash"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 9 #"a-col-cnt"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 24 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-cols"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 9 #"b-col-cnt"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 24 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-cols"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-len"
0 0 24 3 3 #"   "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 24 3 2 #" ("
0 0 14 3 13 #"series-length"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-cols"
0 0 24 3 3 #" #{"
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Index"
0 0 24 3 5 #"} )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (("
0 0 14 3 7 #"dfa-row"
0 0 24 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-len"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 5 #"let*:"
0 0 24 3 3 #" (("
0 0 14 3 7 #"dfa-row"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Index"
0 0 24 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-row"
0 0 24 3 1 #" "
0 0 14 3 6 #"index?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ("
0 0 14 3 7 #"dfa-key"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Key"
0 0 24 3 2 #" ("
0 0 14 3 10 #"dfa-key-fn"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-row"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"dfb-rows"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-hash"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-key"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 4 #" () "
0 0 21 3 1 #"'"
0 0 24 3 6 #"()))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 9 #"displayln"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"Hash join: ~s ~s, ~s\""
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-row"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-key"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfb-rows"
0 0 24 3 18 #"))                "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 17 3 44 #";(copy-null-to-row b-cols-match b-builders))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 7 #"dfb-row"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfb-rows"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 17 3 48 #"; maps possible multiple rows from b to row in a"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 15 #"copy-column-row"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-cols"
0 0 24 3 1 #" "
0 0 14 3 10 #"a-builders"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-row"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 15 #"copy-column-row"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-cols"
0 0 24 3 1 #" "
0 0 14 3 10 #"b-builders"
0 0 24 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfb-row"
0 0 24 3 1 #" "
0 0 14 3 6 #"index?"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; This function consumes two Vectorof Series and two Vectorof"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; SeriesBuilder. The types of Series and SeriesBuilder must"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; match in the respective indicies."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 19 #"do-join-build-outer"
0 0 24 3 3 #" (("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Series"
0 0 24 3 3 #") ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Series"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 13 #"SeriesBuilder"
0 0 24 3 3 #") ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 13 #"SeriesBuilder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"Index"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"Key"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Index"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"Key"
0 0 24 3 2 #") "
0 0 14 3 8 #"JoinHash"
0 0 24 3 1 #" "
0 0 14 3 8 #"JoinHash"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Void"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"do-join-build-outer"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-cols"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-cols"
0 0 24 3 1 #" "
0 0 14 3 10 #"a-builders"
0 0 24 3 1 #" "
0 0 14 3 10 #"b-builders"
0 0 24 3 1 #" "
0 0 14 3 10 #"dfa-key-fn"
0 0 24 3 1 #" "
0 0 14 3 10 #"dfb-key-fn"
0 0 24 3 1 #" "
0 0 14 3 11 #"join-hash-a"
0 0 24 3 1 #" "
0 0 14 3 11 #"join-hash-b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 9 #"a-col-cnt"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 24 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-cols"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 9 #"b-col-cnt"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 24 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-cols"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-len"
0 0 24 3 3 #"   "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 24 3 2 #" ("
0 0 14 3 13 #"series-length"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-cols"
0 0 24 3 3 #" #{"
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Index"
0 0 24 3 5 #"} )))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfb-len"
0 0 24 3 3 #"   "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Fixnum"
0 0 24 3 2 #" ("
0 0 14 3 13 #"series-length"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-cols"
0 0 24 3 3 #" #{"
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Index"
0 0 24 3 5 #"} )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 14 #"joined-key-set"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Setof"
0 0 24 3 1 #" "
0 0 14 3 3 #"Key"
0 0 24 3 3 #") ("
0 0 14 3 3 #"set"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 10 #"; do for a"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (("
0 0 14 3 7 #"dfa-row"
0 0 24 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-len"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 5 #"let*:"
0 0 24 3 3 #" (("
0 0 14 3 7 #"dfa-row"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Index"
0 0 24 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-row"
0 0 24 3 1 #" "
0 0 14 3 6 #"index?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 7 #"dfa-key"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Key"
0 0 24 3 2 #" ("
0 0 14 3 10 #"dfa-key-fn"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-row"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 14 #"joined-key-set"
0 0 24 3 2 #" ("
0 0 14 3 7 #"set-add"
0 0 24 3 1 #" "
0 0 14 3 14 #"joined-key-set"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-key"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"dfb-rows"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 11 #"join-hash-b"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-key"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 4 #" () "
0 0 21 3 1 #"'"
0 0 24 3 6 #"()))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"displayln"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"Hash join A: ~s ~s, ~s\""
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-row"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-key"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfb-rows"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfb-rows"
0 0 24 3 21 #")                    "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 17 3 29 #"; copy a value but null for b"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 15 #"copy-column-row"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-cols"
0 0 24 3 1 #" "
0 0 14 3 10 #"a-builders"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-row"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"copy-null-to-row"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-cols"
0 0 24 3 1 #" "
0 0 14 3 10 #"b-builders"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 7 #"dfb-row"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfb-rows"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 17 3 70
(
 #"; maps possible multiple rows from b to row in a                    "
 #"  "
) 0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 15 #"copy-column-row"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-cols"
0 0 24 3 1 #" "
0 0 14 3 10 #"a-builders"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-row"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 15 #"copy-column-row"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-cols"
0 0 24 3 1 #" "
0 0 14 3 10 #"b-builders"
0 0 24 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfb-row"
0 0 24 3 1 #" "
0 0 14 3 6 #"index?"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 21 #"; do vice versa for b"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (("
0 0 14 3 7 #"dfb-row"
0 0 24 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfb-len"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 5 #"let*:"
0 0 24 3 3 #" (("
0 0 14 3 7 #"dfb-row"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Index"
0 0 24 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfb-row"
0 0 24 3 1 #" "
0 0 14 3 6 #"index?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 7 #"dfb-key"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Key"
0 0 24 3 2 #" ("
0 0 14 3 10 #"dfb-key-fn"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfb-row"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 14 3 14 #"joined-key-set"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"displayln"
0 0 24 3 2 #" ("
0 0 14 3 7 #"subset?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"set"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfb-key"
0 0 24 3 2 #") "
0 0 14 3 14 #"joined-key-set"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"subset?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"set"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfb-key"
0 0 24 3 2 #") "
0 0 14 3 14 #"joined-key-set"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"dfa-rows"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 11 #"join-hash-a"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfb-key"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 4 #" () "
0 0 21 3 1 #"'"
0 0 24 3 6 #"()))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 9 #"displayln"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"Hash join B: ~s ~s, ~s\""
0 0 24 3 1 #" "
0 0 14 3 7 #"dfb-row"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfb-key"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfa-rows"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfa-rows"
0 0 24 3 21 #")                    "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 17 3 29 #"; copy a value but null for b"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 15 #"copy-column-row"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-cols"
0 0 24 3 1 #" "
0 0 14 3 10 #"b-builders"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfb-row"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 16 #"copy-null-to-row"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-cols"
0 0 24 3 1 #" "
0 0 14 3 10 #"a-builders"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 7 #"dfa-row"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfa-rows"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 17 3 70
(
 #"; maps possible multiple rows from b to row in a                    "
 #"  "
) 0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 15 #"copy-column-row"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-cols"
0 0 24 3 1 #" "
0 0 14 3 10 #"a-builders"
0 0 24 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-row"
0 0 24 3 1 #" "
0 0 14 3 6 #"index?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 15 #"copy-column-row"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-cols"
0 0 24 3 1 #" "
0 0 14 3 10 #"b-builders"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfb-row"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; pass in the matched columns as well for display purposes"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; This function consumes two DataFrames to join and an optional"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; on argument which contains a Listof column names to join on."
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; This function does a left join on dfa to dfb."
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; Currently this function only supports joining on one column."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-join-left"
0 0 24 3 2 #" ("
0 0 14 3 9 #"DataFrame"
0 0 24 3 1 #" "
0 0 14 3 9 #"DataFrame"
0 0 24 3 2 #" ["
0 0 23 3 4 #"#:on"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 3 #")] "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 9 #"DataFrame"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"data-frame-join-left"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfb"
0 0 24 3 1 #" "
0 0 23 3 4 #"#:on"
0 0 24 3 2 #" ["
0 0 14 3 4 #"cols"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 60
#"; This function consumes a DataFrame and LabelProjection and"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 25 #"; projects those columns."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 2 #" ("
0 0 14 3 9 #"DataFrame"
0 0 24 3 1 #" "
0 0 14 3 15 #"LabelProjection"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 10 #"data-frame"
0 0 24 3 1 #" "
0 0 14 3 7 #"project"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 18 #"data-frame-explode"
0 0 24 3 1 #" "
0 0 14 3 10 #"data-frame"
0 0 24 3 1 #" "
0 0 23 3 9 #"#:project"
0 0 24 3 1 #" "
0 0 14 3 7 #"project"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 63
#"; This function consumes a Listof Column and returns a Vectorof"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 36 #"; Series contained in those columns."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"src-series"
0 0 24 3 3 #" (("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Series"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"src-series"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"list->vector"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 13 #"column-series"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-a"
0 0 24 3 4 #"    "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Setof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Label"
0 0 24 3 3 #") ("
0 0 14 3 9 #"list->set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"data-frame-names"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-b"
0 0 24 3 4 #"    "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Setof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Label"
0 0 24 3 3 #") ("
0 0 14 3 9 #"list->set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"data-frame-names"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfb"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 39 #"; Get the common cols between fa and fb"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-cols"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Setof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Label"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 13 #"set-intersect"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-a"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 13 #"set-intersect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list->set"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 13 #"set-intersect"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-a"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-b"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 24 #";(when (null? join-cols)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 61
#";(error \"No common columns between data-frames to join on.\"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 48 #"; The column of fb that are not in the join set."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 11 #"non-key-dfb"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Setof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Label"
0 0 24 3 3 #") ("
0 0 14 3 12 #"set-subtract"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-b"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-cols"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 50 #"; get all dfa-cols regardless of join intersection"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfa-cols"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 3 #") ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 44 #"; only get dfb-cols not in join intersection"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfb-cols"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 3 #") ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfb"
0 0 24 3 1 #" "
0 0 14 3 11 #"non-key-dfb"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 52 #"; only get dfb-cols which match for display purposes"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 14 #"dfb-cols-match"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 3 #") ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfb"
0 0 24 3 2 #" ("
0 0 14 3 13 #"set-intersect"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-a"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 44 #"; Create index on fb dataframe on join-cols."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 9 #"dfb-index"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"JoinHash"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"cols"
0 0 24 3 2 #" ("
0 0 14 3 21 #"key-cols-sort-lexical"
0 0 24 3 2 #" ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfb"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-cols"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"index"
0 0 24 3 2 #" ("
0 0 14 3 15 #"key-cols-series"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 9 #"dfa-keyfn"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Index"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"Key"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"key-fn"
0 0 24 3 2 #" ("
0 0 14 3 15 #"key-cols-series"
0 0 24 3 2 #" ("
0 0 14 3 21 #"key-cols-sort-lexical"
0 0 24 3 2 #" ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-cols"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 65
#"; Get series builders of default length 10 for all columns in fa."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-a"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 13 #"SeriesBuilder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"list->vector"
0 0 24 3 2 #" ("
0 0 14 3 28 #"dest-mapping-series-builders"
0 0 24 3 2 #" ("
0 0 14 3 22 #"data-frame-description"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 77
(
 #"; Get series builders of default length 10 for only non-key-fb colum"
 #"ns in fb."
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-b"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 13 #"SeriesBuilder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"list->vector"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 28 #"dest-mapping-series-builders"
0 0 24 3 2 #" ("
0 0 14 3 22 #"data-frame-description"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfb"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 24 #"do-join-build-left/right"
0 0 24 3 2 #" ("
0 0 14 3 10 #"src-series"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfa-cols"
0 0 24 3 3 #") ("
0 0 14 3 10 #"src-series"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfb-cols"
0 0 24 3 3 #") ("
0 0 14 3 10 #"src-series"
0 0 24 3 1 #" "
0 0 14 3 14 #"dfb-cols-match"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-a"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-b"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #" "
0 0 14 3 9 #"dfa-keyfn"
0 0 24 3 1 #" "
0 0 14 3 9 #"dfb-index"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-a-series"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 7 #"builder"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-vector"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-a"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ["
0 0 14 3 3 #"col"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"in-list"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfa-cols"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 16 #"join-column-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-a"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"dfa-\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"series-complete"
0 0 24 3 1 #" "
0 0 14 3 7 #"builder"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-b-series"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 7 #"builder"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-vector"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-b"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ["
0 0 14 3 3 #"col"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"in-list"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfb-cols"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 16 #"join-column-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-b"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"dfb-\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"series-complete"
0 0 24 3 1 #" "
0 0 14 3 7 #"builder"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"new-data-frame"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-a-series"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-b-series"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; right outer join, just reverse fa and fb operations"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; This function consumes two DataFrames to join and an optional"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; on argument which contains a Listof column names to join on."
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; Currently this function only supports joining on one column."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 21 #"data-frame-join-right"
0 0 24 3 2 #" ("
0 0 14 3 9 #"DataFrame"
0 0 24 3 1 #" "
0 0 14 3 9 #"DataFrame"
0 0 24 3 2 #" ["
0 0 23 3 4 #"#:on"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 3 #")] "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 9 #"DataFrame"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"data-frame-join-right"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfb"
0 0 24 3 1 #" "
0 0 23 3 4 #"#:on"
0 0 24 3 2 #" ["
0 0 14 3 4 #"cols"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 60
#"; This function consumes a DataFrame and LabelProjection and"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 25 #"; projects those columns."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 2 #" ("
0 0 14 3 9 #"DataFrame"
0 0 24 3 1 #" "
0 0 14 3 15 #"LabelProjection"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 10 #"data-frame"
0 0 24 3 1 #" "
0 0 14 3 7 #"project"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 18 #"data-frame-explode"
0 0 24 3 1 #" "
0 0 14 3 10 #"data-frame"
0 0 24 3 1 #" "
0 0 23 3 9 #"#:project"
0 0 24 3 1 #" "
0 0 14 3 7 #"project"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 63
#"; This function consumes a Listof Column and returns a Vectorof"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 36 #"; Series contained in those columns."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"src-series"
0 0 24 3 3 #" (("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Series"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"src-series"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"list->vector"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 13 #"column-series"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-a"
0 0 24 3 4 #"    "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Setof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Label"
0 0 24 3 3 #") ("
0 0 14 3 9 #"list->set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"data-frame-names"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-b"
0 0 24 3 4 #"    "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Setof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Label"
0 0 24 3 3 #") ("
0 0 14 3 9 #"list->set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"data-frame-names"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfb"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 39 #"; Get the common cols between fa and fb"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-cols"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Setof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Label"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 13 #"set-intersect"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 13 #"set-intersect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list->set"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 13 #"set-intersect"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-a"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 24 #";(when (null? join-cols)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 61
#";(error \"No common columns between data-frames to join on.\"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 48 #"; The column of fa that are not in the join set."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 11 #"non-key-dfa"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Setof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Label"
0 0 24 3 3 #") ("
0 0 14 3 12 #"set-subtract"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-a"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-cols"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 49 #"; get all fb-cols regardless of join intersection"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfb-cols"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 3 #") ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfb"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 43 #"; only get fa-cols not in join intersection"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfa-cols"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 3 #") ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 1 #" "
0 0 14 3 11 #"non-key-dfa"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 52 #"; only get dfb-cols which match for display purposes"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 14 #"dfa-cols-match"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 3 #") ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 2 #" ("
0 0 14 3 13 #"set-intersect"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-a"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 45 #"; Create index on dfa dataframe on join-cols."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 9 #"dfa-index"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"JoinHash"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"cols"
0 0 24 3 2 #" ("
0 0 14 3 21 #"key-cols-sort-lexical"
0 0 24 3 2 #" ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-cols"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"index"
0 0 24 3 2 #" ("
0 0 14 3 15 #"key-cols-series"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 9 #"dfb-keyfn"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Index"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"Key"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"key-fn"
0 0 24 3 2 #" ("
0 0 14 3 15 #"key-cols-series"
0 0 24 3 2 #" ("
0 0 14 3 21 #"key-cols-sort-lexical"
0 0 24 3 2 #" ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfb"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-cols"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 65
#"; Get series builders of default length 10 for all columns in fb."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-b"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 13 #"SeriesBuilder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"list->vector"
0 0 24 3 2 #" ("
0 0 14 3 28 #"dest-mapping-series-builders"
0 0 24 3 2 #" ("
0 0 14 3 22 #"data-frame-description"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfb"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 77
(
 #"; Get series builders of default length 10 for only non-key-fb colum"
 #"ns in fa."
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-a"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 13 #"SeriesBuilder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"list->vector"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 28 #"dest-mapping-series-builders"
0 0 24 3 2 #" ("
0 0 14 3 22 #"data-frame-description"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 1 #" "
0 0 23 3 9 #"#:project"
0 0 24 3 1 #" "
0 0 14 3 11 #"non-key-dfa"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 24 #"do-join-build-left/right"
0 0 24 3 2 #" ("
0 0 14 3 10 #"src-series"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfb-cols"
0 0 24 3 3 #") ("
0 0 14 3 10 #"src-series"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfa-cols"
0 0 24 3 3 #") ("
0 0 14 3 10 #"src-series"
0 0 24 3 1 #" "
0 0 14 3 14 #"dfa-cols-match"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-b"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-a"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #" "
0 0 14 3 9 #"dfb-keyfn"
0 0 24 3 1 #" "
0 0 14 3 9 #"dfa-index"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-a-series"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 7 #"builder"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-vector"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-a"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ["
0 0 14 3 3 #"col"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"in-list"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfa-cols"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 16 #"join-column-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-a"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"dfa-\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"series-complete"
0 0 24 3 1 #" "
0 0 14 3 7 #"builder"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-b-series"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 7 #"builder"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-vector"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-b"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ["
0 0 14 3 3 #"col"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"in-list"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfb-cols"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 16 #"join-column-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-b"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"dfb-\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"series-complete"
0 0 24 3 1 #" "
0 0 14 3 7 #"builder"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"new-data-frame"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-a-series"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-b-series"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; This function consumes two DataFrames to join and an optional"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; on argument which contains a Listof column names to join on."
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; This function does a left join on dfa to dfb."
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; Currently this function only supports joining on one column."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 21 #"data-frame-join-inner"
0 0 24 3 2 #" ("
0 0 14 3 9 #"DataFrame"
0 0 24 3 1 #" "
0 0 14 3 9 #"DataFrame"
0 0 24 3 2 #" ["
0 0 23 3 4 #"#:on"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 3 #")] "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 9 #"DataFrame"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"data-frame-join-inner"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfb"
0 0 24 3 1 #" "
0 0 23 3 4 #"#:on"
0 0 24 3 2 #" ["
0 0 14 3 4 #"cols"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 60
#"; This function consumes a DataFrame and LabelProjection and"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 25 #"; projects those columns."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 2 #" ("
0 0 14 3 9 #"DataFrame"
0 0 24 3 1 #" "
0 0 14 3 15 #"LabelProjection"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 10 #"data-frame"
0 0 24 3 1 #" "
0 0 14 3 7 #"project"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 18 #"data-frame-explode"
0 0 24 3 1 #" "
0 0 14 3 10 #"data-frame"
0 0 24 3 1 #" "
0 0 23 3 9 #"#:project"
0 0 24 3 1 #" "
0 0 14 3 7 #"project"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 63
#"; This function consumes a Listof Column and returns a Vectorof"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 36 #"; Series contained in those columns."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"src-series"
0 0 24 3 3 #" (("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Series"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"src-series"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"list->vector"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 13 #"column-series"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-a"
0 0 24 3 4 #"    "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Setof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Label"
0 0 24 3 3 #") ("
0 0 14 3 9 #"list->set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"data-frame-names"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-b"
0 0 24 3 4 #"    "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Setof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Label"
0 0 24 3 3 #") ("
0 0 14 3 9 #"list->set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"data-frame-names"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfb"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 39 #"; Get the common cols between fa and fb"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-cols"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Setof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Label"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 13 #"set-intersect"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-a"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 13 #"set-intersect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list->set"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 13 #"set-intersect"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-a"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-b"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-cols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 51 #"\"No common columns between data-frames to join on.\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 48 #"; The column of fb that are not in the join set."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 11 #"non-key-dfb"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Setof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Label"
0 0 24 3 3 #") ("
0 0 14 3 12 #"set-subtract"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-b"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-cols"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 50 #"; get all dfa-cols regardless of join intersection"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfa-cols"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 3 #") ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 44 #"; only get dfb-cols not in join intersection"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfb-cols"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 3 #") ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfb"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 44 #"; Create index on fb dataframe on join-cols."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 9 #"dfb-index"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"JoinHash"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"cols"
0 0 24 3 2 #" ("
0 0 14 3 21 #"key-cols-sort-lexical"
0 0 24 3 2 #" ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfb"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-cols"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"index"
0 0 24 3 2 #" ("
0 0 14 3 15 #"key-cols-series"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 9 #"dfa-keyfn"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Index"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"Key"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"key-fn"
0 0 24 3 2 #" ("
0 0 14 3 15 #"key-cols-series"
0 0 24 3 2 #" ("
0 0 14 3 21 #"key-cols-sort-lexical"
0 0 24 3 2 #" ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-cols"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 65
#"; Get series builders of default length 10 for all columns in fa."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-a"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 13 #"SeriesBuilder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"list->vector"
0 0 24 3 2 #" ("
0 0 14 3 28 #"dest-mapping-series-builders"
0 0 24 3 2 #" ("
0 0 14 3 22 #"data-frame-description"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 77
(
 #"; Get series builders of default length 10 for only non-key-fb colum"
 #"ns in fb."
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-b"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 13 #"SeriesBuilder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"list->vector"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 28 #"dest-mapping-series-builders"
0 0 24 3 2 #" ("
0 0 14 3 22 #"data-frame-description"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfb"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"do-join-build-inner"
0 0 24 3 2 #" ("
0 0 14 3 10 #"src-series"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfa-cols"
0 0 24 3 3 #") ("
0 0 14 3 10 #"src-series"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfb-cols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-a"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-b"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #" "
0 0 14 3 9 #"dfa-keyfn"
0 0 24 3 1 #" "
0 0 14 3 9 #"dfb-index"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-a-series"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 7 #"builder"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-vector"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-a"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ["
0 0 14 3 3 #"col"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"in-list"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfa-cols"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 16 #"join-column-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-a"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"dfa-\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"series-complete"
0 0 24 3 1 #" "
0 0 14 3 7 #"builder"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-b-series"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 7 #"builder"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-vector"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-b"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ["
0 0 14 3 3 #"col"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"in-list"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfb-cols"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 16 #"join-column-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-b"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"dfb-\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"series-complete"
0 0 24 3 1 #" "
0 0 14 3 7 #"builder"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"new-data-frame"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-a-series"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-b-series"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; This function consumes two DataFrames to join and an optional"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; on argument which contains a Listof column names to join on."
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; This function does a left join on dfa to dfb."
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; Currently this function only supports joining on one column."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 21 #"data-frame-join-outer"
0 0 24 3 2 #" ("
0 0 14 3 9 #"DataFrame"
0 0 24 3 1 #" "
0 0 14 3 9 #"DataFrame"
0 0 24 3 2 #" ["
0 0 23 3 4 #"#:on"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 3 #")] "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 9 #"DataFrame"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"data-frame-join-outer"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfb"
0 0 24 3 1 #" "
0 0 23 3 4 #"#:on"
0 0 24 3 2 #" ["
0 0 14 3 4 #"cols"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 60
#"; This function consumes a DataFrame and LabelProjection and"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 25 #"; projects those columns."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 2 #" ("
0 0 14 3 9 #"DataFrame"
0 0 24 3 1 #" "
0 0 14 3 15 #"LabelProjection"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 10 #"data-frame"
0 0 24 3 1 #" "
0 0 14 3 7 #"project"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 18 #"data-frame-explode"
0 0 24 3 1 #" "
0 0 14 3 10 #"data-frame"
0 0 24 3 1 #" "
0 0 23 3 9 #"#:project"
0 0 24 3 1 #" "
0 0 14 3 7 #"project"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 63
#"; This function consumes a Listof Column and returns a Vectorof"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 36 #"; Series contained in those columns."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"src-series"
0 0 24 3 3 #" (("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Series"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"src-series"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"list->vector"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 13 #"column-series"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-a"
0 0 24 3 4 #"    "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Setof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Label"
0 0 24 3 3 #") ("
0 0 14 3 9 #"list->set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"data-frame-names"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-b"
0 0 24 3 4 #"    "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Setof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Label"
0 0 24 3 3 #") ("
0 0 14 3 9 #"list->set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"data-frame-names"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfb"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 39 #"; Get the common cols between fa and fb"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-cols"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Setof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Label"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 13 #"set-intersect"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-a"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 13 #"set-intersect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list->set"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 13 #"set-intersect"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-a"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-b"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-cols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 51 #"\"No common columns between data-frames to join on.\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 48 #"; The column of fb that are not in the join set."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 11 #"non-key-dfb"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Setof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Label"
0 0 24 3 3 #") ("
0 0 14 3 12 #"set-subtract"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-b"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-cols"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 50 #"; get all dfa-cols regardless of join intersection"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfa-cols"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 3 #") ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 44 #"; only get dfb-cols not in join intersection"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfb-cols"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 3 #") ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfb"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 44 #"; Create index on fb dataframe on join-cols."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 9 #"dfa-index"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"JoinHash"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"cols"
0 0 24 3 2 #" ("
0 0 14 3 21 #"key-cols-sort-lexical"
0 0 24 3 2 #" ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-cols"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"index"
0 0 24 3 2 #" ("
0 0 14 3 15 #"key-cols-series"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 44 #"; Create index on fb dataframe on join-cols."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 9 #"dfb-index"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"JoinHash"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"cols"
0 0 24 3 2 #" ("
0 0 14 3 21 #"key-cols-sort-lexical"
0 0 24 3 2 #" ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfb"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-cols"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"index"
0 0 24 3 2 #" ("
0 0 14 3 15 #"key-cols-series"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 9 #"dfa-keyfn"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Index"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"Key"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"key-fn"
0 0 24 3 2 #" ("
0 0 14 3 15 #"key-cols-series"
0 0 24 3 2 #" ("
0 0 14 3 21 #"key-cols-sort-lexical"
0 0 24 3 2 #" ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-cols"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 9 #"dfb-keyfn"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Index"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"Key"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"key-fn"
0 0 24 3 2 #" ("
0 0 14 3 15 #"key-cols-series"
0 0 24 3 2 #" ("
0 0 14 3 21 #"key-cols-sort-lexical"
0 0 24 3 2 #" ("
0 0 14 3 15 #"data-frame-cols"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfb"
0 0 24 3 1 #" "
0 0 14 3 9 #"join-cols"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 65
#"; Get series builders of default length 10 for all columns in fa."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-a"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 13 #"SeriesBuilder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"list->vector"
0 0 24 3 2 #" ("
0 0 14 3 28 #"dest-mapping-series-builders"
0 0 24 3 2 #" ("
0 0 14 3 22 #"data-frame-description"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 77
(
 #"; Get series builders of default length 10 for only non-key-fb colum"
 #"ns in fb."
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-b"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 13 #"SeriesBuilder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"list->vector"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 28 #"dest-mapping-series-builders"
0 0 24 3 2 #" ("
0 0 14 3 22 #"data-frame-description"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfb"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"do-join-build-outer"
0 0 24 3 2 #" ("
0 0 14 3 10 #"src-series"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfa-cols"
0 0 24 3 3 #") ("
0 0 14 3 10 #"src-series"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfb-cols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-a"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-b"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #" "
0 0 14 3 9 #"dfa-keyfn"
0 0 24 3 1 #" "
0 0 14 3 9 #"dfb-keyfn"
0 0 24 3 1 #" "
0 0 14 3 9 #"dfa-index"
0 0 24 3 1 #" "
0 0 14 3 9 #"dfb-index"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-a-series"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 7 #"builder"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-vector"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-a"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ["
0 0 14 3 3 #"col"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"in-list"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfa-cols"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 16 #"join-column-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-a"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"dfa-\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"series-complete"
0 0 24 3 1 #" "
0 0 14 3 7 #"builder"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"define:"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-b-series"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Column"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 7 #"builder"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-vector"
0 0 24 3 1 #" "
0 0 14 3 15 #"dest-builders-b"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ["
0 0 14 3 3 #"col"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"in-list"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfb-cols"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 16 #"join-column-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #" "
0 0 14 3 6 #"cols-b"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"dfb-\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"series-complete"
0 0 24 3 1 #" "
0 0 14 3 7 #"builder"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"new-data-frame"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-a-series"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-b-series"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ***********************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; ***********"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; Test Cases"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; ***********"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"integer-col-1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"integer-col-1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"integer-col-2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"integer-col-2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"float-col-1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"float-col-1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-NSeries"
0 0 24 3 2 #" ("
0 0 14 3 8 #"flvector"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"2.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"5.5"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"categorical-col-1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 21 3 1 #"'"
0 0 24 3 1 #" "
0 0 14 3 17 #"categorical-col-1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-CSeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"e"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; opaque"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";(check-equal? (column-series integer-col-1)"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";              (new-ISeries (vector 1 2 3 4 5) #f))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 16 #"join-column-name"
0 0 24 3 1 #" "
0 0 14 3 13 #"integer-col-1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"set"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"integer-col-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"integer-col-2"
0 0 24 3 2 #") "
0 0 19 3 8 #"\"prefix\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"'"
0 0 14 3 19 #"prefixinteger-col-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #"; (: dest-mapping-series-builders (DataFrameDescription Index -> (Li"
 #"stof SeriesBuilder)))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"columns-integer"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col3"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"columns-categorical"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-CSeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"e"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-CSeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"i"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col3"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-CSeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"j"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"n"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; create new data-frame-integer"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"data-frame-integer"
0 0 24 3 2 #" ("
0 0 14 3 14 #"new-data-frame"
0 0 24 3 1 #" "
0 0 14 3 15 #"columns-integer"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; create new data-frame-categorical"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"data-frame-categorical"
0 0 24 3 2 #" ("
0 0 14 3 14 #"new-data-frame"
0 0 24 3 1 #" "
0 0 14 3 19 #"columns-categorical"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; unable to protect opaque value"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";(check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 77
(
 #";(dest-mapping-series-builders (data-frame-description data-frame-in"
 #"teger) 4)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 77
(
 #";(list (new-ISeriesBuilder 4) (new-ISeriesBuilder 4) (new-ISeriesBui"
 #"lder 4)))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; Unable to protect opaque"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";(check-equal? (key-cols-sort-lexical (list integer-col-2 integer-co"
 #"l-1))"
) 0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 53 #";(list (cons 'col2 (new-ISeries (vector 5 6 7 8) #f))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 17 3 52 #";(cons 'col3 (new-ISeries (vector 9 10 11 12) #f))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; Unable to protect opaque"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";(check-equal? (key-cols-series (list integer-col-2 integer-col-1 fl"
 #"oat-col-1))"
) 0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 68
#";(list (column-series integer-col-2) (column-series integer-col-1)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #" (("
0 0 14 3 6 #"key-fn"
0 0 24 3 2 #" ("
0 0 14 3 15 #"key-cols-series"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 13 #"integer-col-2"
0 0 24 3 1 #" "
0 0 14 3 13 #"integer-col-1"
0 0 24 3 1 #" "
0 0 14 3 11 #"float-col-1"
0 0 24 3 1 #" "
0 0 14 3 17 #"categorical-col-1"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"8\\t3\\tc\\t\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; build hash join"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";(check-equal?"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #"; (index (key-cols-series (list integer-col-2 integer-col-1 float-co"
 #"l-1 categorical-col-1)))"
) 0 0 24 29 1 #"\n"
0 0 17 3 28 #"; (hash \"6\\t1\\ta\\t\" (list 0)"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";       \"7\\t2\\tb\\t\" (list 1)"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";       \"8\\t3\\tc\\t\" (list 2)"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";       \"10\\t5\\t3\\t\" (list 4)"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";       \"9\\t4\\td\\t\" (list 3)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"index"
0 0 24 3 2 #" ("
0 0 14 3 15 #"key-cols-series"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 13 #"integer-col-2"
0 0 24 3 1 #" "
0 0 14 3 13 #"integer-col-1"
0 0 24 3 1 #" "
0 0 14 3 11 #"float-col-1"
0 0 24 3 1 #" "
0 0 14 3 17 #"categorical-col-1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"cseries-1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-CSeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"e"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"iseries-1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"nseries-1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-NSeries"
0 0 24 3 2 #" ("
0 0 14 3 8 #"flvector"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"2.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"5.5"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"cseries-2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-CSeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"iseries-2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"nseries-2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-NSeries"
0 0 24 3 2 #" ("
0 0 14 3 8 #"flvector"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"2.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"5.5"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"cseries-builder-1"
0 0 24 3 2 #" ("
0 0 14 3 18 #"new-CSeriesBuilder"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"cseries-copy-fn-1"
0 0 24 3 2 #" ("
0 0 14 3 15 #"cseries-copy-fn"
0 0 24 3 1 #" "
0 0 14 3 9 #"cseries-1"
0 0 24 3 1 #" "
0 0 14 3 17 #"cseries-builder-1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 17 #"cseries-copy-fn-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 26 #"cseries-builder-1-complete"
0 0 24 3 2 #" ("
0 0 14 3 23 #"complete-CSeriesBuilder"
0 0 24 3 1 #" "
0 0 14 3 17 #"cseries-builder-1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cseries-iref"
0 0 24 3 1 #" "
0 0 14 3 26 #"cseries-builder-1-complete"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";(copy-column-row-error cseries-1 3)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"cseries-builder-2"
0 0 24 3 2 #" ("
0 0 14 3 18 #"new-CSeriesBuilder"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"iseries-builder-1"
0 0 24 3 2 #" ("
0 0 14 3 18 #"new-ISeriesBuilder"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"nseries-builder-1"
0 0 24 3 2 #" ("
0 0 14 3 18 #"new-NSeriesBuilder"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";(: copy-column-row ((Vectorof Series) (Vectorof SeriesBuilder) Inde"
 #"x -> Void))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"copy-column-row"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 14 3 9 #"cseries-1"
0 0 24 3 1 #" "
0 0 14 3 9 #"iseries-1"
0 0 24 3 1 #" "
0 0 14 3 9 #"nseries-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 14 3 17 #"cseries-builder-2"
0 0 24 3 1 #" "
0 0 14 3 17 #"iseries-builder-1"
0 0 24 3 1 #" "
0 0 14 3 17 #"nseries-builder-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cseries-iref"
0 0 24 3 2 #" ("
0 0 14 3 23 #"complete-CSeriesBuilder"
0 0 24 3 1 #" "
0 0 14 3 17 #"cseries-builder-2"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"iseries-iref"
0 0 24 3 2 #" ("
0 0 14 3 23 #"complete-ISeriesBuilder"
0 0 24 3 1 #" "
0 0 14 3 17 #"iseries-builder-1"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"nseries-iref"
0 0 24 3 2 #" ("
0 0 14 3 23 #"complete-NSeriesBuilder"
0 0 24 3 1 #" "
0 0 14 3 17 #"nseries-builder-1"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; (: do-join-build-left/right ((Vectorof Series) (Vectorof Series)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 51 #"  (Vectorof SeriesBuilder) (Vectorof SeriesBuilder)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 35 #"  (Index -> Key) JoinHash -> Void))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"fa-key-fn"
0 0 24 3 2 #" ("
0 0 14 3 6 #"key-fn"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 9 #"cseries-1"
0 0 24 3 1 #" "
0 0 14 3 9 #"iseries-1"
0 0 24 3 1 #" "
0 0 14 3 9 #"cseries-2"
0 0 24 3 1 #" "
0 0 14 3 9 #"iseries-2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"fa-key-fn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"cseries-builder-a"
0 0 24 3 2 #" ("
0 0 14 3 18 #"new-CSeriesBuilder"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"iseries-builder-a"
0 0 24 3 2 #" ("
0 0 14 3 18 #"new-ISeriesBuilder"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"cseries-builder-b"
0 0 24 3 2 #" ("
0 0 14 3 18 #"new-CSeriesBuilder"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"iseries-builder-b"
0 0 24 3 2 #" ("
0 0 14 3 18 #"new-ISeriesBuilder"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";(series-data (complete-CSeriesBuilder cseries-builder-a))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";(series-data (complete-CSeriesBuilder cseries-builder-b))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 105
(
 #";(frame-write-tab (data-frame-join-left data-frame-integer data-fram"
 #"e-categorical) (current-output-port))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"columns-integer-2"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col3"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col4"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 2 #"21"
0 0 24 3 1 #" "
0 0 21 3 2 #"22"
0 0 24 3 1 #" "
0 0 21 3 2 #"23"
0 0 24 3 1 #" "
0 0 21 3 2 #"24"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"columns-integer-3"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 1 #" "
0 0 21 3 2 #"26"
0 0 24 3 1 #" "
0 0 21 3 2 #"27"
0 0 24 3 1 #" "
0 0 21 3 2 #"28"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col3"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 2 #"29"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 21 3 2 #"31"
0 0 24 3 1 #" "
0 0 21 3 2 #"32"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col4"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 3 #"101"
0 0 24 3 1 #" "
0 0 21 3 3 #"201"
0 0 24 3 1 #" "
0 0 21 3 3 #"301"
0 0 24 3 1 #" "
0 0 21 3 3 #"401"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; create new data-frame-integer-2"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-integer-2"
0 0 24 3 2 #" ("
0 0 14 3 14 #"new-data-frame"
0 0 24 3 1 #" "
0 0 14 3 17 #"columns-integer-2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; create new data-frame-integer-3"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-integer-3"
0 0 24 3 2 #" ("
0 0 14 3 14 #"new-data-frame"
0 0 24 3 1 #" "
0 0 14 3 17 #"columns-integer-3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"frame-write-tab"
0 0 24 3 2 #" ("
0 0 14 3 20 #"data-frame-join-left"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-integer-2"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-integer-3"
0 0 24 3 1 #" "
0 0 23 3 4 #"#:on"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col1"
0 0 24 3 4 #")) ("
0 0 14 3 19 #"current-output-port"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"frame-write-tab"
0 0 24 3 2 #" ("
0 0 14 3 20 #"data-frame-join-left"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-integer-2"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-integer-3"
0 0 24 3 1 #" "
0 0 23 3 4 #"#:on"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col2"
0 0 24 3 4 #")) ("
0 0 14 3 19 #"current-output-port"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"frame-write-tab"
0 0 24 3 2 #" ("
0 0 14 3 21 #"data-frame-join-right"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-integer-2"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-integer-3"
0 0 24 3 1 #" "
0 0 23 3 4 #"#:on"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col1"
0 0 24 3 4 #")) ("
0 0 14 3 19 #"current-output-port"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"frame-write-tab"
0 0 24 3 2 #" ("
0 0 14 3 21 #"data-frame-join-right"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-integer-2"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-integer-3"
0 0 24 3 1 #" "
0 0 23 3 4 #"#:on"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col2"
0 0 24 3 4 #")) ("
0 0 14 3 19 #"current-output-port"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"columns-integer-4"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col3"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col4"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 2 #"21"
0 0 24 3 1 #" "
0 0 21 3 2 #"22"
0 0 24 3 1 #" "
0 0 21 3 2 #"23"
0 0 24 3 1 #" "
0 0 21 3 2 #"24"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"columns-integer-5"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col3"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 2 #"29"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 21 3 2 #"31"
0 0 24 3 1 #" "
0 0 21 3 2 #"32"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col4"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 3 #"101"
0 0 24 3 1 #" "
0 0 21 3 3 #"201"
0 0 24 3 1 #" "
0 0 21 3 3 #"301"
0 0 24 3 1 #" "
0 0 21 3 3 #"401"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; create new data-frame-integer-4"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-integer-4"
0 0 24 3 2 #" ("
0 0 14 3 14 #"new-data-frame"
0 0 24 3 1 #" "
0 0 14 3 17 #"columns-integer-4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; create new data-frame-integer-5"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-integer-5"
0 0 24 3 2 #" ("
0 0 14 3 14 #"new-data-frame"
0 0 24 3 1 #" "
0 0 14 3 17 #"columns-integer-5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"frame-write-tab"
0 0 24 3 2 #" ("
0 0 14 3 20 #"data-frame-join-left"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-integer-4"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-integer-5"
0 0 24 3 1 #" "
0 0 23 3 4 #"#:on"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"co3"
0 0 24 3 4 #")) ("
0 0 14 3 19 #"current-output-port"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"frame-write-tab"
0 0 24 3 2 #" ("
0 0 14 3 21 #"data-frame-join-inner"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-integer-2"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-integer-3"
0 0 24 3 1 #" "
0 0 23 3 4 #"#:on"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col1"
0 0 24 3 4 #")) ("
0 0 14 3 19 #"current-output-port"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"frame-write-tab"
0 0 24 3 2 #" ("
0 0 14 3 21 #"data-frame-join-inner"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-integer-4"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-integer-5"
0 0 24 3 1 #" "
0 0 23 3 4 #"#:on"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col2"
0 0 24 3 4 #")) ("
0 0 14 3 19 #"current-output-port"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"frame-write-tab"
0 0 24 3 2 #" ("
0 0 14 3 21 #"data-frame-join-outer"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-integer-4"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-integer-5"
0 0 24 3 1 #" "
0 0 23 3 4 #"#:on"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col2"
0 0 24 3 4 #")) ("
0 0 14 3 19 #"current-output-port"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"frame-write-tab"
0 0 24 3 2 #" ("
0 0 14 3 21 #"data-frame-join-outer"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-integer-4"
0 0 24 3 1 #" "
0 0 14 3 20 #"data-frame-integer-5"
0 0 24 3 1 #" "
0 0 23 3 4 #"#:on"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col3"
0 0 24 3 4 #")) ("
0 0 14 3 19 #"current-output-port"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"columns-mixed-1"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-CSeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"d"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col3"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 2 #"21"
0 0 24 3 1 #" "
0 0 21 3 2 #"22"
0 0 24 3 1 #" "
0 0 21 3 2 #"23"
0 0 24 3 1 #" "
0 0 21 3 2 #"24"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"columns-mixed-2"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-CSeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"d"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col3"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; create new data-frame-mixed-1"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"data-frame-mixed-1"
0 0 24 3 2 #" ("
0 0 14 3 14 #"new-data-frame"
0 0 24 3 1 #" "
0 0 14 3 15 #"columns-mixed-1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; create new data-frame-mixed-2"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"data-frame-mixed-2"
0 0 24 3 2 #" ("
0 0 14 3 14 #"new-data-frame"
0 0 24 3 1 #" "
0 0 14 3 15 #"columns-mixed-2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"frame-write-tab"
0 0 24 3 2 #" ("
0 0 14 3 21 #"data-frame-join-outer"
0 0 24 3 1 #" "
0 0 14 3 18 #"data-frame-mixed-1"
0 0 24 3 1 #" "
0 0 14 3 18 #"data-frame-mixed-2"
0 0 24 3 1 #" "
0 0 23 3 4 #"#:on"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col2"
0 0 24 3 4 #")) ("
0 0 14 3 19 #"current-output-port"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"frame-write-tab"
0 0 24 3 2 #" ("
0 0 14 3 21 #"data-frame-join-outer"
0 0 24 3 1 #" "
0 0 14 3 18 #"data-frame-mixed-1"
0 0 24 3 1 #" "
0 0 14 3 18 #"data-frame-mixed-2"
0 0 24 3 1 #" "
0 0 23 3 4 #"#:on"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col3"
0 0 24 3 4 #")) ("
0 0 14 3 19 #"current-output-port"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"columns-mixed-3"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-CSeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"d"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col3"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 2 #"21"
0 0 24 3 1 #" "
0 0 21 3 2 #"22"
0 0 24 3 1 #" "
0 0 21 3 2 #"23"
0 0 24 3 1 #" "
0 0 21 3 2 #"24"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"columns-mixed-4"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-CSeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"d"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col3"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-ISeries"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; create new data-frame-mixed-1"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"data-frame-mixed-3"
0 0 24 3 2 #" ("
0 0 14 3 14 #"new-data-frame"
0 0 24 3 1 #" "
0 0 14 3 15 #"columns-mixed-3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; create new data-frame-mixed-2"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"data-frame-mixed-4"
0 0 24 3 2 #" ("
0 0 14 3 14 #"new-data-frame"
0 0 24 3 1 #" "
0 0 14 3 15 #"columns-mixed-4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"frame-write-tab"
0 0 24 3 2 #" ("
0 0 14 3 21 #"data-frame-join-outer"
0 0 24 3 1 #" "
0 0 14 3 18 #"data-frame-mixed-3"
0 0 24 3 1 #" "
0 0 14 3 18 #"data-frame-mixed-4"
0 0 24 3 1 #" "
0 0 23 3 4 #"#:on"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"col2"
0 0 24 3 4 #")) ("
0 0 14 3 19 #"current-output-port"
0 0 24 3 2 #"))"
0           0
